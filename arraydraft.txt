 while(1):
        if quads[i][0] == '+':
            #print("sumando")
            dicc[quads[i][3]] = int(dicc[quads[i][1]]) + int(dicc[quads[i][2]])
        elif quads[i][0] == '-':
            #print("restando")
            dicc[quads[i][3]] = int(dicc[quads[i][1]]) - int(dicc[quads[i][2]])
        elif quads[i][0] == '*':
            #print("multiplicando")
            dicc[quads[i][3]] = int(dicc[quads[i][1]]) * int(dicc[quads[i][2]])
        elif quads[i][0] == '/':
            #print("dividiendo")
            dicc[quads[i][3]] = int(dicc[quads[i][1]]) / int(dicc[quads[i][2]])
        elif quads[i][0] == '=':
            print("asignando")
            print(quads[i][3])
            print(dicc[quads[i][1]])
            if int(quads[i][3]) > 20999:
                dicc[str(dicc[quads[i][3]])] = dicc[quads[i][1]]
            else:
                dicc[quads[i][3]] = dicc[quads[i][1]]
        elif quads[i][0] == '>':
            #print("comparando dir {} dir {} {} con {}".format(quads[i][1],quads[i][2]),dicc[quads[i][1]],dicc[quads[i][2]])
            dicc[quads[i][3]] = dicc[quads[i][1]] > dicc[quads[i][2]]
            #print("El resultado fue {}".format(dicc[quads[i][3]]))
        elif quads[i][0] == '<':
            dicc[quads[i][3]] = dicc[quads[i][1]] < dicc[quads[i][2]]
        elif quads[i][0] == '>=':
            dicc[quads[i][3]] = dicc[quads[i][1]] >= dicc[quads[i][2]]
        elif quads[i][0] == '<=':
            dicc[quads[i][3]] = dicc[quads[i][1]] <= dicc[quads[i][2]]
        elif quads[i][0] == '==':
            dicc[quads[i][3]] = dicc[quads[i][1]] == dicc[quads[i][2]]
        elif quads[i][0] == '!=':
            dicc[quads[i][3]] = dicc[quads[i][1]] != dicc[quads[i][2]]
        elif quads[i][0] == '|':
            dicc[quads[i][3]] = dicc[quads[i][1]] or dicc[quads[i][2]]
        elif quads[i][0] == '&':
            dicc[quads[i][3]] = dicc[quads[i][1]] and dicc[quads[i][2]]
        elif quads[i][0] == 'ENDFUNC':
            #print("Final de funcion")
            i = regresa
            dicc = temp['main']
            #print("El contador ahora vale {}".format(i))
        elif quads[i][0] == 'ERA':
            dicc = temp[quads[i][3]]
            #print("Se requieren {} espacios de memoria".format(len(dicc)-1))
        elif quads[i][0] == 'GOTO':
            #print("Llendo al cuadruplo {}".format(int(quads[i][3])))
            i = int(quads[i][3]) - 1
            continue
        elif quads[i][0] == 'GOTOV':
            if dicc[quads[i][1]]:
                #print("i vale {}".format(i))
                i = int(quads[i][3]) - 2
                #print("saltando al cuadruplo {}".format(i))
            #else:
                #print("se sigue el curso")
        elif quads[i][0] == 'GOTOF':
            if not dicc[quads[i][1]]:
                #print("i vale {}".format(i))
                i = int(quads[i][3]) - 2
                #print("saltando al cuadruplo {}".format(i))
            else:
                print("se sigue el curso")
        elif quads[i][0] == 'GOSUB':
            #print("Llendo al cuadruplo {}".format(int(quads[i][3])))
            regresa = i
            #print("Se tiene que regresar al cuadruplo {}".format(regresa))
            i = int(quads[i][3]) - 1
            continue
        elif quads[i][0] == 'PRINT':
            if int(dicc[quads[i][3]]) > 20999:
                pointer = str(dicc[quads[i][3]])
                print(dicc[pointer])
            else:
                print(dicc[quads[i][3]])
        elif quads[i][0] == 'INPUT':
            lee = input("leyendo...")
            dicc[quads[i][3]] = lee
        elif quads[i][0] == 'VER':
            lower = dicc[quads[i][2]]
            upper = dicc[quads[i][3]]
            if str(dicc[quads[i][1]]) in dicc:
                toCheck = dicc[str(dicc[quads[i][1]])]
                if toCheck >= lower and toCheck <= upper:
                    dicc[quads[i][1]] = toCheck
                else:
                    print("Error while indexing")
            else:
                toCheck = dicc[quads[i][1]]
                if toCheck >= lower and toCheck <= upper:
                    dicc[quads[i][1]] = toCheck
            
        if i == len(quads) - 1:
            break
        i += 1