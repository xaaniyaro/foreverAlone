Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     empty -> <empty>
Rule 2     programa -> PROGRAMA ID SEMICOLON addMain vars createTable func_declarations main showstacks
Rule 3     addMain -> empty
Rule 4     createTable -> empty
Rule 5     vars -> VAR var2
Rule 6     var1 -> tipo lista_ids SEMICOLON
Rule 7     var2 -> var1 var2
Rule 8     var2 -> var1
Rule 9     var_decl -> ID
Rule 10    var_decl -> ID LBRACKET CTEI RBRACKET
Rule 11    var_decl -> ID LBRACKET exp RBRACKET
Rule 12    lista_ids -> lista_ids COMMA var_decl
Rule 13    lista_ids -> var_decl
Rule 14    tipo -> INT
Rule 15    tipo -> FLOAT
Rule 16    tipo -> CHAR
Rule 17    func_declarations -> func_decl func_declarations
Rule 18    func_declarations -> empty
Rule 19    func_decl -> FUNCION func2 func3 LPAREN params RPAREN vars bloque endFunc
Rule 20    func_decl -> FUNCION func2 func3 LPAREN RPAREN vars bloque endFunc
Rule 21    func_decl -> FUNCION func2 func3 LPAREN params RPAREN bloque endFunc
Rule 22    func_decl -> FUNCION func2 func3 LPAREN RPAREN bloque endFunc
Rule 23    func3 -> ID
Rule 24    func2 -> tipo
Rule 25    func2 -> VOID
Rule 26    endFunc -> empty
Rule 27    bloque -> LCURLY bloque1 RCURLY
Rule 28    bloque1 -> estatuto bloque1
Rule 29    bloque1 -> empty
Rule 30    estatuto -> asig
Rule 31    estatuto -> cond
Rule 32    estatuto -> retorno
Rule 33    estatuto -> lectura
Rule 34    estatuto -> escritura
Rule 35    estatuto -> llamada SEMICOLON
Rule 36    estatuto -> repeticion
Rule 37    asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON
Rule 38    addVar -> <empty>
Rule 39    addAsig -> <empty>
Rule 40    genAsig -> <empty>
Rule 41    main -> printfuncs PRINCIPAL LPAREN RPAREN fillFirst bloque
Rule 42    fillFirst -> empty
Rule 43    param_decl -> tipo ID
Rule 44    params -> params COMMA param_decl
Rule 45    params -> param_decl
Rule 46    retorno -> REGRESA LPAREN exp RPAREN SEMICOLON
Rule 47    llamada -> iniciaLlamada llamada2 endLlamada RPAREN
Rule 48    llamada -> iniciaLlamada endLlamada RPAREN
Rule 49    iniciaLlamada -> ID LPAREN
Rule 50    llamada2 -> exp COMMA llamada2
Rule 51    llamada2 -> exp
Rule 52    endLlamada -> <empty>
Rule 53    lectura -> LEE LPAREN variable RPAREN SEMICOLON
Rule 54    escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON
Rule 55    escritura1 -> CTES
Rule 56    escritura1 -> exp
Rule 57    escritura2 -> escritura1 COMMA escritura2
Rule 58    escritura2 -> escritura1
Rule 59    cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2
Rule 60    cond1 -> empty
Rule 61    cond2 -> empty
Rule 62    elsePart -> SINO elseActions bloque
Rule 63    elsePart -> empty
Rule 64    elseActions -> empty
Rule 65    repeticion -> condicional
Rule 66    repeticion -> nocondicional
Rule 67    condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile
Rule 68    regWhile -> empty
Rule 69    whileCond -> empty
Rule 70    endWhile -> empty
Rule 71    nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor
Rule 72    createFor -> <empty>
Rule 73    endFor -> <empty>
Rule 74    exp -> texp exp1
Rule 75    exp1 -> OR texp exp1
Rule 76    exp1 -> empty
Rule 77    texp -> gexp texp1
Rule 78    texp1 -> AND gexp texp1
Rule 79    texp1 -> empty
Rule 80    gexp -> mexp gexp1
Rule 81    gexp1 -> gexp2 mexp gexp1
Rule 82    gexp1 -> empty
Rule 83    gexp2 -> LESS
Rule 84    gexp2 -> LESSO
Rule 85    gexp2 -> GREATER
Rule 86    gexp2 -> GREATERO
Rule 87    gexp2 -> NOTEQUAL
Rule 88    gexp2 -> EQUALS
Rule 89    mexp -> termino mexp1
Rule 90    mexp1 -> mexp2 termino mexp1
Rule 91    mexp1 -> empty
Rule 92    mexp2 -> PLUS
Rule 93    mexp2 -> MINUS
Rule 94    termino -> factor termino1
Rule 95    termino1 -> TIMES factor termino1
Rule 96    termino1 -> DIVIDE factor termino1
Rule 97    termino1 -> empty
Rule 98    factor -> LPAREN exp RPAREN
Rule 99    factor -> varcte
Rule 100   factor -> variable
Rule 101   factor -> llamada
Rule 102   variable -> ID dimension
Rule 103   dimension -> LBRACKET exp RBRACKET
Rule 104   dimension -> empty
Rule 105   varcte -> CTEI
Rule 106   varcte -> CTEF
Rule 107   varcte -> CTEC
Rule 108   showstacks -> empty
Rule 109   printfuncs -> empty

Terminals, with rules where they appear

AND                  : 78
CHAR                 : 16
COMMA                : 12 44 50 57
CTEC                 : 107
CTEF                 : 106
CTEI                 : 10 71 71 105
CTES                 : 55
DESDE                : 71
DIVIDE               : 96
ENTONCES             : 59
EQUAL                : 37 71
EQUALS               : 88
ESCRIBE              : 54
FLOAT                : 15
FUNCION              : 19 20 21 22
GREATER              : 85
GREATERO             : 86
HACER                : 71
HASTA                : 71
HAZ                  : 67
ID                   : 2 9 10 11 23 43 49 71 102
INT                  : 14
LBRACKET             : 10 11 103
LCURLY               : 27
LEE                  : 53
LESS                 : 83
LESSO                : 84
LPAREN               : 19 20 21 22 41 46 49 53 54 59 67 98
MIENTRAS             : 67
MINUS                : 93
NOTEQUAL             : 87
OR                   : 75
PLUS                 : 92
PRINCIPAL            : 41
PROGRAMA             : 2
RBRACKET             : 10 11 103
RCURLY               : 27
REGRESA              : 46
RPAREN               : 19 20 21 22 41 46 47 48 53 54 59 67 98
SEMICOLON            : 2 6 35 37 46 53 54
SI                   : 59
SINO                 : 62
TIMES                : 95
VAR                  : 5
VOID                 : 25
error                : 

Nonterminals, with rules where they appear

addAsig              : 37
addMain              : 2
addVar               : 37
asig                 : 30
bloque               : 19 20 21 22 41 59 62 67 71
bloque1              : 27 28
cond                 : 31
cond1                : 59
cond2                : 59
condicional          : 65
createFor            : 71
createTable          : 2
dimension            : 102
elseActions          : 62
elsePart             : 59
empty                : 3 4 18 26 29 42 60 61 63 64 68 69 70 76 79 82 91 97 104 108 109
endFor               : 71
endFunc              : 19 20 21 22
endLlamada           : 47 48
endWhile             : 67
escritura            : 34
escritura1           : 57 58
escritura2           : 54 57
estatuto             : 28
exp                  : 11 37 46 50 51 56 59 67 98 103
exp1                 : 74 75
factor               : 94 95 96
fillFirst            : 41
func2                : 19 20 21 22
func3                : 19 20 21 22
func_decl            : 17
func_declarations    : 2 17
genAsig              : 37
gexp                 : 77 78
gexp1                : 80 81
gexp2                : 81
iniciaLlamada        : 47 48
lectura              : 33
lista_ids            : 6 12
llamada              : 35 101
llamada2             : 47 50
main                 : 2
mexp                 : 80 81
mexp1                : 89 90
mexp2                : 90
nocondicional        : 66
param_decl           : 44 45
params               : 19 21 44
printfuncs           : 41
programa             : 0
regWhile             : 67
repeticion           : 36
retorno              : 32
showstacks           : 2
termino              : 89 90
termino1             : 94 95 96
texp                 : 74 75
texp1                : 77 78
tipo                 : 6 24 43
var1                 : 7 8
var2                 : 5 7
var_decl             : 12 13
varcte               : 99
variable             : 37 53 100
vars                 : 2 19 20
whileCond            : 67

Parsing method: LALR

state 0

    (0) S' -> . programa
    (2) programa -> . PROGRAMA ID SEMICOLON addMain vars createTable func_declarations main showstacks

    PROGRAMA        shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (2) programa -> PROGRAMA . ID SEMICOLON addMain vars createTable func_declarations main showstacks

    ID              shift and go to state 3


state 3

    (2) programa -> PROGRAMA ID . SEMICOLON addMain vars createTable func_declarations main showstacks

    SEMICOLON       shift and go to state 4


state 4

    (2) programa -> PROGRAMA ID SEMICOLON . addMain vars createTable func_declarations main showstacks
    (3) addMain -> . empty
    (1) empty -> .

    VAR             reduce using rule 1 (empty -> .)

    addMain                        shift and go to state 5
    empty                          shift and go to state 6

state 5

    (2) programa -> PROGRAMA ID SEMICOLON addMain . vars createTable func_declarations main showstacks
    (5) vars -> . VAR var2

    VAR             shift and go to state 8

    vars                           shift and go to state 7

state 6

    (3) addMain -> empty .

    VAR             reduce using rule 3 (addMain -> empty .)


state 7

    (2) programa -> PROGRAMA ID SEMICOLON addMain vars . createTable func_declarations main showstacks
    (4) createTable -> . empty
    (1) empty -> .

    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)

    createTable                    shift and go to state 9
    empty                          shift and go to state 10

state 8

    (5) vars -> VAR . var2
    (7) var2 -> . var1 var2
    (8) var2 -> . var1
    (6) var1 -> . tipo lista_ids SEMICOLON
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    var2                           shift and go to state 11
    var1                           shift and go to state 12
    tipo                           shift and go to state 13

state 9

    (2) programa -> PROGRAMA ID SEMICOLON addMain vars createTable . func_declarations main showstacks
    (17) func_declarations -> . func_decl func_declarations
    (18) func_declarations -> . empty
    (19) func_decl -> . FUNCION func2 func3 LPAREN params RPAREN vars bloque endFunc
    (20) func_decl -> . FUNCION func2 func3 LPAREN RPAREN vars bloque endFunc
    (21) func_decl -> . FUNCION func2 func3 LPAREN params RPAREN bloque endFunc
    (22) func_decl -> . FUNCION func2 func3 LPAREN RPAREN bloque endFunc
    (1) empty -> .

    FUNCION         shift and go to state 20
    PRINCIPAL       reduce using rule 1 (empty -> .)

    func_declarations              shift and go to state 17
    func_decl                      shift and go to state 18
    empty                          shift and go to state 19

state 10

    (4) createTable -> empty .

    FUNCION         reduce using rule 4 (createTable -> empty .)
    PRINCIPAL       reduce using rule 4 (createTable -> empty .)


state 11

    (5) vars -> VAR var2 .

    FUNCION         reduce using rule 5 (vars -> VAR var2 .)
    PRINCIPAL       reduce using rule 5 (vars -> VAR var2 .)
    LCURLY          reduce using rule 5 (vars -> VAR var2 .)


state 12

    (7) var2 -> var1 . var2
    (8) var2 -> var1 .
    (7) var2 -> . var1 var2
    (8) var2 -> . var1
    (6) var1 -> . tipo lista_ids SEMICOLON
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR

    FUNCION         reduce using rule 8 (var2 -> var1 .)
    PRINCIPAL       reduce using rule 8 (var2 -> var1 .)
    LCURLY          reduce using rule 8 (var2 -> var1 .)
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    var1                           shift and go to state 12
    var2                           shift and go to state 21
    tipo                           shift and go to state 13

state 13

    (6) var1 -> tipo . lista_ids SEMICOLON
    (12) lista_ids -> . lista_ids COMMA var_decl
    (13) lista_ids -> . var_decl
    (9) var_decl -> . ID
    (10) var_decl -> . ID LBRACKET CTEI RBRACKET
    (11) var_decl -> . ID LBRACKET exp RBRACKET

    ID              shift and go to state 24

    lista_ids                      shift and go to state 22
    var_decl                       shift and go to state 23

state 14

    (14) tipo -> INT .

    ID              reduce using rule 14 (tipo -> INT .)


state 15

    (15) tipo -> FLOAT .

    ID              reduce using rule 15 (tipo -> FLOAT .)


state 16

    (16) tipo -> CHAR .

    ID              reduce using rule 16 (tipo -> CHAR .)


state 17

    (2) programa -> PROGRAMA ID SEMICOLON addMain vars createTable func_declarations . main showstacks
    (41) main -> . printfuncs PRINCIPAL LPAREN RPAREN fillFirst bloque
    (109) printfuncs -> . empty
    (1) empty -> .

    PRINCIPAL       reduce using rule 1 (empty -> .)

    main                           shift and go to state 25
    printfuncs                     shift and go to state 26
    empty                          shift and go to state 27

state 18

    (17) func_declarations -> func_decl . func_declarations
    (17) func_declarations -> . func_decl func_declarations
    (18) func_declarations -> . empty
    (19) func_decl -> . FUNCION func2 func3 LPAREN params RPAREN vars bloque endFunc
    (20) func_decl -> . FUNCION func2 func3 LPAREN RPAREN vars bloque endFunc
    (21) func_decl -> . FUNCION func2 func3 LPAREN params RPAREN bloque endFunc
    (22) func_decl -> . FUNCION func2 func3 LPAREN RPAREN bloque endFunc
    (1) empty -> .

    FUNCION         shift and go to state 20
    PRINCIPAL       reduce using rule 1 (empty -> .)

    func_decl                      shift and go to state 18
    func_declarations              shift and go to state 28
    empty                          shift and go to state 19

state 19

    (18) func_declarations -> empty .

    PRINCIPAL       reduce using rule 18 (func_declarations -> empty .)


state 20

    (19) func_decl -> FUNCION . func2 func3 LPAREN params RPAREN vars bloque endFunc
    (20) func_decl -> FUNCION . func2 func3 LPAREN RPAREN vars bloque endFunc
    (21) func_decl -> FUNCION . func2 func3 LPAREN params RPAREN bloque endFunc
    (22) func_decl -> FUNCION . func2 func3 LPAREN RPAREN bloque endFunc
    (24) func2 -> . tipo
    (25) func2 -> . VOID
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR

    VOID            shift and go to state 31
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    func2                          shift and go to state 29
    tipo                           shift and go to state 30

state 21

    (7) var2 -> var1 var2 .

    FUNCION         reduce using rule 7 (var2 -> var1 var2 .)
    PRINCIPAL       reduce using rule 7 (var2 -> var1 var2 .)
    LCURLY          reduce using rule 7 (var2 -> var1 var2 .)


state 22

    (6) var1 -> tipo lista_ids . SEMICOLON
    (12) lista_ids -> lista_ids . COMMA var_decl

    SEMICOLON       shift and go to state 32
    COMMA           shift and go to state 33


state 23

    (13) lista_ids -> var_decl .

    SEMICOLON       reduce using rule 13 (lista_ids -> var_decl .)
    COMMA           reduce using rule 13 (lista_ids -> var_decl .)


state 24

    (9) var_decl -> ID .
    (10) var_decl -> ID . LBRACKET CTEI RBRACKET
    (11) var_decl -> ID . LBRACKET exp RBRACKET

    SEMICOLON       reduce using rule 9 (var_decl -> ID .)
    COMMA           reduce using rule 9 (var_decl -> ID .)
    LBRACKET        shift and go to state 34


state 25

    (2) programa -> PROGRAMA ID SEMICOLON addMain vars createTable func_declarations main . showstacks
    (108) showstacks -> . empty
    (1) empty -> .

    $end            reduce using rule 1 (empty -> .)

    showstacks                     shift and go to state 35
    empty                          shift and go to state 36

state 26

    (41) main -> printfuncs . PRINCIPAL LPAREN RPAREN fillFirst bloque

    PRINCIPAL       shift and go to state 37


state 27

    (109) printfuncs -> empty .

    PRINCIPAL       reduce using rule 109 (printfuncs -> empty .)


state 28

    (17) func_declarations -> func_decl func_declarations .

    PRINCIPAL       reduce using rule 17 (func_declarations -> func_decl func_declarations .)


state 29

    (19) func_decl -> FUNCION func2 . func3 LPAREN params RPAREN vars bloque endFunc
    (20) func_decl -> FUNCION func2 . func3 LPAREN RPAREN vars bloque endFunc
    (21) func_decl -> FUNCION func2 . func3 LPAREN params RPAREN bloque endFunc
    (22) func_decl -> FUNCION func2 . func3 LPAREN RPAREN bloque endFunc
    (23) func3 -> . ID

    ID              shift and go to state 39

    func3                          shift and go to state 38

state 30

    (24) func2 -> tipo .

    ID              reduce using rule 24 (func2 -> tipo .)


state 31

    (25) func2 -> VOID .

    ID              reduce using rule 25 (func2 -> VOID .)


state 32

    (6) var1 -> tipo lista_ids SEMICOLON .

    INT             reduce using rule 6 (var1 -> tipo lista_ids SEMICOLON .)
    FLOAT           reduce using rule 6 (var1 -> tipo lista_ids SEMICOLON .)
    CHAR            reduce using rule 6 (var1 -> tipo lista_ids SEMICOLON .)
    FUNCION         reduce using rule 6 (var1 -> tipo lista_ids SEMICOLON .)
    PRINCIPAL       reduce using rule 6 (var1 -> tipo lista_ids SEMICOLON .)
    LCURLY          reduce using rule 6 (var1 -> tipo lista_ids SEMICOLON .)


state 33

    (12) lista_ids -> lista_ids COMMA . var_decl
    (9) var_decl -> . ID
    (10) var_decl -> . ID LBRACKET CTEI RBRACKET
    (11) var_decl -> . ID LBRACKET exp RBRACKET

    ID              shift and go to state 24

    var_decl                       shift and go to state 40

state 34

    (10) var_decl -> ID LBRACKET . CTEI RBRACKET
    (11) var_decl -> ID LBRACKET . exp RBRACKET
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    CTEI            shift and go to state 42
    LPAREN          shift and go to state 49
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    exp                            shift and go to state 43
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 35

    (2) programa -> PROGRAMA ID SEMICOLON addMain vars createTable func_declarations main showstacks .

    $end            reduce using rule 2 (programa -> PROGRAMA ID SEMICOLON addMain vars createTable func_declarations main showstacks .)


state 36

    (108) showstacks -> empty .

    $end            reduce using rule 108 (showstacks -> empty .)


state 37

    (41) main -> printfuncs PRINCIPAL . LPAREN RPAREN fillFirst bloque

    LPAREN          shift and go to state 56


state 38

    (19) func_decl -> FUNCION func2 func3 . LPAREN params RPAREN vars bloque endFunc
    (20) func_decl -> FUNCION func2 func3 . LPAREN RPAREN vars bloque endFunc
    (21) func_decl -> FUNCION func2 func3 . LPAREN params RPAREN bloque endFunc
    (22) func_decl -> FUNCION func2 func3 . LPAREN RPAREN bloque endFunc

    LPAREN          shift and go to state 57


state 39

    (23) func3 -> ID .

    LPAREN          reduce using rule 23 (func3 -> ID .)


state 40

    (12) lista_ids -> lista_ids COMMA var_decl .

    SEMICOLON       reduce using rule 12 (lista_ids -> lista_ids COMMA var_decl .)
    COMMA           reduce using rule 12 (lista_ids -> lista_ids COMMA var_decl .)


state 41

    (102) variable -> ID . dimension
    (49) iniciaLlamada -> ID . LPAREN
    (103) dimension -> . LBRACKET exp RBRACKET
    (104) dimension -> . empty
    (1) empty -> .

    LPAREN          shift and go to state 59
    LBRACKET        shift and go to state 60
    TIMES           reduce using rule 1 (empty -> .)
    DIVIDE          reduce using rule 1 (empty -> .)
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    LESSO           reduce using rule 1 (empty -> .)
    GREATER         reduce using rule 1 (empty -> .)
    GREATERO        reduce using rule 1 (empty -> .)
    NOTEQUAL        reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)
    EQUAL           reduce using rule 1 (empty -> .)

    dimension                      shift and go to state 58
    empty                          shift and go to state 61

state 42

    (10) var_decl -> ID LBRACKET CTEI . RBRACKET
    (105) varcte -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 62
    TIMES           reduce using rule 105 (varcte -> CTEI .)
    DIVIDE          reduce using rule 105 (varcte -> CTEI .)
    PLUS            reduce using rule 105 (varcte -> CTEI .)
    MINUS           reduce using rule 105 (varcte -> CTEI .)
    LESS            reduce using rule 105 (varcte -> CTEI .)
    LESSO           reduce using rule 105 (varcte -> CTEI .)
    GREATER         reduce using rule 105 (varcte -> CTEI .)
    GREATERO        reduce using rule 105 (varcte -> CTEI .)
    NOTEQUAL        reduce using rule 105 (varcte -> CTEI .)
    EQUALS          reduce using rule 105 (varcte -> CTEI .)
    AND             reduce using rule 105 (varcte -> CTEI .)
    OR              reduce using rule 105 (varcte -> CTEI .)

  ! RBRACKET        [ reduce using rule 105 (varcte -> CTEI .) ]


state 43

    (11) var_decl -> ID LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 63


state 44

    (74) exp -> texp . exp1
    (75) exp1 -> . OR texp exp1
    (76) exp1 -> . empty
    (1) empty -> .

    OR              shift and go to state 65
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    exp1                           shift and go to state 64
    empty                          shift and go to state 66

state 45

    (77) texp -> gexp . texp1
    (78) texp1 -> . AND gexp texp1
    (79) texp1 -> . empty
    (1) empty -> .

    AND             shift and go to state 68
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    texp1                          shift and go to state 67
    empty                          shift and go to state 69

state 46

    (80) gexp -> mexp . gexp1
    (81) gexp1 -> . gexp2 mexp gexp1
    (82) gexp1 -> . empty
    (83) gexp2 -> . LESS
    (84) gexp2 -> . LESSO
    (85) gexp2 -> . GREATER
    (86) gexp2 -> . GREATERO
    (87) gexp2 -> . NOTEQUAL
    (88) gexp2 -> . EQUALS
    (1) empty -> .

    LESS            shift and go to state 73
    LESSO           shift and go to state 74
    GREATER         shift and go to state 75
    GREATERO        shift and go to state 76
    NOTEQUAL        shift and go to state 77
    EQUALS          shift and go to state 78
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    gexp1                          shift and go to state 70
    gexp2                          shift and go to state 71
    empty                          shift and go to state 72

state 47

    (89) mexp -> termino . mexp1
    (90) mexp1 -> . mexp2 termino mexp1
    (91) mexp1 -> . empty
    (92) mexp2 -> . PLUS
    (93) mexp2 -> . MINUS
    (1) empty -> .

    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LESS            reduce using rule 1 (empty -> .)
    LESSO           reduce using rule 1 (empty -> .)
    GREATER         reduce using rule 1 (empty -> .)
    GREATERO        reduce using rule 1 (empty -> .)
    NOTEQUAL        reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    mexp1                          shift and go to state 79
    mexp2                          shift and go to state 80
    empty                          shift and go to state 81

state 48

    (94) termino -> factor . termino1
    (95) termino1 -> . TIMES factor termino1
    (96) termino1 -> . DIVIDE factor termino1
    (97) termino1 -> . empty
    (1) empty -> .

    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 86
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    LESSO           reduce using rule 1 (empty -> .)
    GREATER         reduce using rule 1 (empty -> .)
    GREATERO        reduce using rule 1 (empty -> .)
    NOTEQUAL        reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    termino1                       shift and go to state 84
    empty                          shift and go to state 87

state 49

    (98) factor -> LPAREN . exp RPAREN
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    exp                            shift and go to state 88
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 50

    (99) factor -> varcte .

    TIMES           reduce using rule 99 (factor -> varcte .)
    DIVIDE          reduce using rule 99 (factor -> varcte .)
    PLUS            reduce using rule 99 (factor -> varcte .)
    MINUS           reduce using rule 99 (factor -> varcte .)
    LESS            reduce using rule 99 (factor -> varcte .)
    LESSO           reduce using rule 99 (factor -> varcte .)
    GREATER         reduce using rule 99 (factor -> varcte .)
    GREATERO        reduce using rule 99 (factor -> varcte .)
    NOTEQUAL        reduce using rule 99 (factor -> varcte .)
    EQUALS          reduce using rule 99 (factor -> varcte .)
    AND             reduce using rule 99 (factor -> varcte .)
    OR              reduce using rule 99 (factor -> varcte .)
    RBRACKET        reduce using rule 99 (factor -> varcte .)
    RPAREN          reduce using rule 99 (factor -> varcte .)
    COMMA           reduce using rule 99 (factor -> varcte .)
    SEMICOLON       reduce using rule 99 (factor -> varcte .)


state 51

    (100) factor -> variable .

    TIMES           reduce using rule 100 (factor -> variable .)
    DIVIDE          reduce using rule 100 (factor -> variable .)
    PLUS            reduce using rule 100 (factor -> variable .)
    MINUS           reduce using rule 100 (factor -> variable .)
    LESS            reduce using rule 100 (factor -> variable .)
    LESSO           reduce using rule 100 (factor -> variable .)
    GREATER         reduce using rule 100 (factor -> variable .)
    GREATERO        reduce using rule 100 (factor -> variable .)
    NOTEQUAL        reduce using rule 100 (factor -> variable .)
    EQUALS          reduce using rule 100 (factor -> variable .)
    AND             reduce using rule 100 (factor -> variable .)
    OR              reduce using rule 100 (factor -> variable .)
    RBRACKET        reduce using rule 100 (factor -> variable .)
    RPAREN          reduce using rule 100 (factor -> variable .)
    COMMA           reduce using rule 100 (factor -> variable .)
    SEMICOLON       reduce using rule 100 (factor -> variable .)


state 52

    (101) factor -> llamada .

    TIMES           reduce using rule 101 (factor -> llamada .)
    DIVIDE          reduce using rule 101 (factor -> llamada .)
    PLUS            reduce using rule 101 (factor -> llamada .)
    MINUS           reduce using rule 101 (factor -> llamada .)
    LESS            reduce using rule 101 (factor -> llamada .)
    LESSO           reduce using rule 101 (factor -> llamada .)
    GREATER         reduce using rule 101 (factor -> llamada .)
    GREATERO        reduce using rule 101 (factor -> llamada .)
    NOTEQUAL        reduce using rule 101 (factor -> llamada .)
    EQUALS          reduce using rule 101 (factor -> llamada .)
    AND             reduce using rule 101 (factor -> llamada .)
    OR              reduce using rule 101 (factor -> llamada .)
    RBRACKET        reduce using rule 101 (factor -> llamada .)
    RPAREN          reduce using rule 101 (factor -> llamada .)
    COMMA           reduce using rule 101 (factor -> llamada .)
    SEMICOLON       reduce using rule 101 (factor -> llamada .)


state 53

    (106) varcte -> CTEF .

    TIMES           reduce using rule 106 (varcte -> CTEF .)
    DIVIDE          reduce using rule 106 (varcte -> CTEF .)
    PLUS            reduce using rule 106 (varcte -> CTEF .)
    MINUS           reduce using rule 106 (varcte -> CTEF .)
    LESS            reduce using rule 106 (varcte -> CTEF .)
    LESSO           reduce using rule 106 (varcte -> CTEF .)
    GREATER         reduce using rule 106 (varcte -> CTEF .)
    GREATERO        reduce using rule 106 (varcte -> CTEF .)
    NOTEQUAL        reduce using rule 106 (varcte -> CTEF .)
    EQUALS          reduce using rule 106 (varcte -> CTEF .)
    AND             reduce using rule 106 (varcte -> CTEF .)
    OR              reduce using rule 106 (varcte -> CTEF .)
    RBRACKET        reduce using rule 106 (varcte -> CTEF .)
    RPAREN          reduce using rule 106 (varcte -> CTEF .)
    COMMA           reduce using rule 106 (varcte -> CTEF .)
    SEMICOLON       reduce using rule 106 (varcte -> CTEF .)


state 54

    (107) varcte -> CTEC .

    TIMES           reduce using rule 107 (varcte -> CTEC .)
    DIVIDE          reduce using rule 107 (varcte -> CTEC .)
    PLUS            reduce using rule 107 (varcte -> CTEC .)
    MINUS           reduce using rule 107 (varcte -> CTEC .)
    LESS            reduce using rule 107 (varcte -> CTEC .)
    LESSO           reduce using rule 107 (varcte -> CTEC .)
    GREATER         reduce using rule 107 (varcte -> CTEC .)
    GREATERO        reduce using rule 107 (varcte -> CTEC .)
    NOTEQUAL        reduce using rule 107 (varcte -> CTEC .)
    EQUALS          reduce using rule 107 (varcte -> CTEC .)
    AND             reduce using rule 107 (varcte -> CTEC .)
    OR              reduce using rule 107 (varcte -> CTEC .)
    RBRACKET        reduce using rule 107 (varcte -> CTEC .)
    RPAREN          reduce using rule 107 (varcte -> CTEC .)
    COMMA           reduce using rule 107 (varcte -> CTEC .)
    SEMICOLON       reduce using rule 107 (varcte -> CTEC .)


state 55

    (47) llamada -> iniciaLlamada . llamada2 endLlamada RPAREN
    (48) llamada -> iniciaLlamada . endLlamada RPAREN
    (50) llamada2 -> . exp COMMA llamada2
    (51) llamada2 -> . exp
    (52) endLlamada -> .
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    RPAREN          reduce using rule 52 (endLlamada -> .)
    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    iniciaLlamada                  shift and go to state 55
    llamada2                       shift and go to state 90
    endLlamada                     shift and go to state 91
    exp                            shift and go to state 92
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52

state 56

    (41) main -> printfuncs PRINCIPAL LPAREN . RPAREN fillFirst bloque

    RPAREN          shift and go to state 93


state 57

    (19) func_decl -> FUNCION func2 func3 LPAREN . params RPAREN vars bloque endFunc
    (20) func_decl -> FUNCION func2 func3 LPAREN . RPAREN vars bloque endFunc
    (21) func_decl -> FUNCION func2 func3 LPAREN . params RPAREN bloque endFunc
    (22) func_decl -> FUNCION func2 func3 LPAREN . RPAREN bloque endFunc
    (44) params -> . params COMMA param_decl
    (45) params -> . param_decl
    (43) param_decl -> . tipo ID
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR

    RPAREN          shift and go to state 95
    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    params                         shift and go to state 94
    param_decl                     shift and go to state 96
    tipo                           shift and go to state 97

state 58

    (102) variable -> ID dimension .

    TIMES           reduce using rule 102 (variable -> ID dimension .)
    DIVIDE          reduce using rule 102 (variable -> ID dimension .)
    PLUS            reduce using rule 102 (variable -> ID dimension .)
    MINUS           reduce using rule 102 (variable -> ID dimension .)
    LESS            reduce using rule 102 (variable -> ID dimension .)
    LESSO           reduce using rule 102 (variable -> ID dimension .)
    GREATER         reduce using rule 102 (variable -> ID dimension .)
    GREATERO        reduce using rule 102 (variable -> ID dimension .)
    NOTEQUAL        reduce using rule 102 (variable -> ID dimension .)
    EQUALS          reduce using rule 102 (variable -> ID dimension .)
    AND             reduce using rule 102 (variable -> ID dimension .)
    OR              reduce using rule 102 (variable -> ID dimension .)
    RBRACKET        reduce using rule 102 (variable -> ID dimension .)
    RPAREN          reduce using rule 102 (variable -> ID dimension .)
    COMMA           reduce using rule 102 (variable -> ID dimension .)
    SEMICOLON       reduce using rule 102 (variable -> ID dimension .)
    EQUAL           reduce using rule 102 (variable -> ID dimension .)


state 59

    (49) iniciaLlamada -> ID LPAREN .

    LPAREN          reduce using rule 49 (iniciaLlamada -> ID LPAREN .)
    CTEI            reduce using rule 49 (iniciaLlamada -> ID LPAREN .)
    CTEF            reduce using rule 49 (iniciaLlamada -> ID LPAREN .)
    CTEC            reduce using rule 49 (iniciaLlamada -> ID LPAREN .)
    ID              reduce using rule 49 (iniciaLlamada -> ID LPAREN .)
    RPAREN          reduce using rule 49 (iniciaLlamada -> ID LPAREN .)


state 60

    (103) dimension -> LBRACKET . exp RBRACKET
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    exp                            shift and go to state 98
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 61

    (104) dimension -> empty .

    TIMES           reduce using rule 104 (dimension -> empty .)
    DIVIDE          reduce using rule 104 (dimension -> empty .)
    PLUS            reduce using rule 104 (dimension -> empty .)
    MINUS           reduce using rule 104 (dimension -> empty .)
    LESS            reduce using rule 104 (dimension -> empty .)
    LESSO           reduce using rule 104 (dimension -> empty .)
    GREATER         reduce using rule 104 (dimension -> empty .)
    GREATERO        reduce using rule 104 (dimension -> empty .)
    NOTEQUAL        reduce using rule 104 (dimension -> empty .)
    EQUALS          reduce using rule 104 (dimension -> empty .)
    AND             reduce using rule 104 (dimension -> empty .)
    OR              reduce using rule 104 (dimension -> empty .)
    RBRACKET        reduce using rule 104 (dimension -> empty .)
    RPAREN          reduce using rule 104 (dimension -> empty .)
    COMMA           reduce using rule 104 (dimension -> empty .)
    SEMICOLON       reduce using rule 104 (dimension -> empty .)
    EQUAL           reduce using rule 104 (dimension -> empty .)


state 62

    (10) var_decl -> ID LBRACKET CTEI RBRACKET .

    SEMICOLON       reduce using rule 10 (var_decl -> ID LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 10 (var_decl -> ID LBRACKET CTEI RBRACKET .)


state 63

    (11) var_decl -> ID LBRACKET exp RBRACKET .

    SEMICOLON       reduce using rule 11 (var_decl -> ID LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 11 (var_decl -> ID LBRACKET exp RBRACKET .)


state 64

    (74) exp -> texp exp1 .

    RBRACKET        reduce using rule 74 (exp -> texp exp1 .)
    RPAREN          reduce using rule 74 (exp -> texp exp1 .)
    COMMA           reduce using rule 74 (exp -> texp exp1 .)
    SEMICOLON       reduce using rule 74 (exp -> texp exp1 .)


state 65

    (75) exp1 -> OR . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    texp                           shift and go to state 99
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 66

    (76) exp1 -> empty .

    RBRACKET        reduce using rule 76 (exp1 -> empty .)
    RPAREN          reduce using rule 76 (exp1 -> empty .)
    COMMA           reduce using rule 76 (exp1 -> empty .)
    SEMICOLON       reduce using rule 76 (exp1 -> empty .)


state 67

    (77) texp -> gexp texp1 .

    OR              reduce using rule 77 (texp -> gexp texp1 .)
    RBRACKET        reduce using rule 77 (texp -> gexp texp1 .)
    RPAREN          reduce using rule 77 (texp -> gexp texp1 .)
    COMMA           reduce using rule 77 (texp -> gexp texp1 .)
    SEMICOLON       reduce using rule 77 (texp -> gexp texp1 .)


state 68

    (78) texp1 -> AND . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    gexp                           shift and go to state 100
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 69

    (79) texp1 -> empty .

    OR              reduce using rule 79 (texp1 -> empty .)
    RBRACKET        reduce using rule 79 (texp1 -> empty .)
    RPAREN          reduce using rule 79 (texp1 -> empty .)
    COMMA           reduce using rule 79 (texp1 -> empty .)
    SEMICOLON       reduce using rule 79 (texp1 -> empty .)


state 70

    (80) gexp -> mexp gexp1 .

    AND             reduce using rule 80 (gexp -> mexp gexp1 .)
    OR              reduce using rule 80 (gexp -> mexp gexp1 .)
    RBRACKET        reduce using rule 80 (gexp -> mexp gexp1 .)
    RPAREN          reduce using rule 80 (gexp -> mexp gexp1 .)
    COMMA           reduce using rule 80 (gexp -> mexp gexp1 .)
    SEMICOLON       reduce using rule 80 (gexp -> mexp gexp1 .)


state 71

    (81) gexp1 -> gexp2 . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    mexp                           shift and go to state 101
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 72

    (82) gexp1 -> empty .

    AND             reduce using rule 82 (gexp1 -> empty .)
    OR              reduce using rule 82 (gexp1 -> empty .)
    RBRACKET        reduce using rule 82 (gexp1 -> empty .)
    RPAREN          reduce using rule 82 (gexp1 -> empty .)
    COMMA           reduce using rule 82 (gexp1 -> empty .)
    SEMICOLON       reduce using rule 82 (gexp1 -> empty .)


state 73

    (83) gexp2 -> LESS .

    LPAREN          reduce using rule 83 (gexp2 -> LESS .)
    CTEI            reduce using rule 83 (gexp2 -> LESS .)
    CTEF            reduce using rule 83 (gexp2 -> LESS .)
    CTEC            reduce using rule 83 (gexp2 -> LESS .)
    ID              reduce using rule 83 (gexp2 -> LESS .)


state 74

    (84) gexp2 -> LESSO .

    LPAREN          reduce using rule 84 (gexp2 -> LESSO .)
    CTEI            reduce using rule 84 (gexp2 -> LESSO .)
    CTEF            reduce using rule 84 (gexp2 -> LESSO .)
    CTEC            reduce using rule 84 (gexp2 -> LESSO .)
    ID              reduce using rule 84 (gexp2 -> LESSO .)


state 75

    (85) gexp2 -> GREATER .

    LPAREN          reduce using rule 85 (gexp2 -> GREATER .)
    CTEI            reduce using rule 85 (gexp2 -> GREATER .)
    CTEF            reduce using rule 85 (gexp2 -> GREATER .)
    CTEC            reduce using rule 85 (gexp2 -> GREATER .)
    ID              reduce using rule 85 (gexp2 -> GREATER .)


state 76

    (86) gexp2 -> GREATERO .

    LPAREN          reduce using rule 86 (gexp2 -> GREATERO .)
    CTEI            reduce using rule 86 (gexp2 -> GREATERO .)
    CTEF            reduce using rule 86 (gexp2 -> GREATERO .)
    CTEC            reduce using rule 86 (gexp2 -> GREATERO .)
    ID              reduce using rule 86 (gexp2 -> GREATERO .)


state 77

    (87) gexp2 -> NOTEQUAL .

    LPAREN          reduce using rule 87 (gexp2 -> NOTEQUAL .)
    CTEI            reduce using rule 87 (gexp2 -> NOTEQUAL .)
    CTEF            reduce using rule 87 (gexp2 -> NOTEQUAL .)
    CTEC            reduce using rule 87 (gexp2 -> NOTEQUAL .)
    ID              reduce using rule 87 (gexp2 -> NOTEQUAL .)


state 78

    (88) gexp2 -> EQUALS .

    LPAREN          reduce using rule 88 (gexp2 -> EQUALS .)
    CTEI            reduce using rule 88 (gexp2 -> EQUALS .)
    CTEF            reduce using rule 88 (gexp2 -> EQUALS .)
    CTEC            reduce using rule 88 (gexp2 -> EQUALS .)
    ID              reduce using rule 88 (gexp2 -> EQUALS .)


state 79

    (89) mexp -> termino mexp1 .

    LESS            reduce using rule 89 (mexp -> termino mexp1 .)
    LESSO           reduce using rule 89 (mexp -> termino mexp1 .)
    GREATER         reduce using rule 89 (mexp -> termino mexp1 .)
    GREATERO        reduce using rule 89 (mexp -> termino mexp1 .)
    NOTEQUAL        reduce using rule 89 (mexp -> termino mexp1 .)
    EQUALS          reduce using rule 89 (mexp -> termino mexp1 .)
    AND             reduce using rule 89 (mexp -> termino mexp1 .)
    OR              reduce using rule 89 (mexp -> termino mexp1 .)
    RBRACKET        reduce using rule 89 (mexp -> termino mexp1 .)
    RPAREN          reduce using rule 89 (mexp -> termino mexp1 .)
    COMMA           reduce using rule 89 (mexp -> termino mexp1 .)
    SEMICOLON       reduce using rule 89 (mexp -> termino mexp1 .)


state 80

    (90) mexp1 -> mexp2 . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    termino                        shift and go to state 102
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 81

    (91) mexp1 -> empty .

    LESS            reduce using rule 91 (mexp1 -> empty .)
    LESSO           reduce using rule 91 (mexp1 -> empty .)
    GREATER         reduce using rule 91 (mexp1 -> empty .)
    GREATERO        reduce using rule 91 (mexp1 -> empty .)
    NOTEQUAL        reduce using rule 91 (mexp1 -> empty .)
    EQUALS          reduce using rule 91 (mexp1 -> empty .)
    AND             reduce using rule 91 (mexp1 -> empty .)
    OR              reduce using rule 91 (mexp1 -> empty .)
    RBRACKET        reduce using rule 91 (mexp1 -> empty .)
    RPAREN          reduce using rule 91 (mexp1 -> empty .)
    COMMA           reduce using rule 91 (mexp1 -> empty .)
    SEMICOLON       reduce using rule 91 (mexp1 -> empty .)


state 82

    (92) mexp2 -> PLUS .

    LPAREN          reduce using rule 92 (mexp2 -> PLUS .)
    CTEI            reduce using rule 92 (mexp2 -> PLUS .)
    CTEF            reduce using rule 92 (mexp2 -> PLUS .)
    CTEC            reduce using rule 92 (mexp2 -> PLUS .)
    ID              reduce using rule 92 (mexp2 -> PLUS .)


state 83

    (93) mexp2 -> MINUS .

    LPAREN          reduce using rule 93 (mexp2 -> MINUS .)
    CTEI            reduce using rule 93 (mexp2 -> MINUS .)
    CTEF            reduce using rule 93 (mexp2 -> MINUS .)
    CTEC            reduce using rule 93 (mexp2 -> MINUS .)
    ID              reduce using rule 93 (mexp2 -> MINUS .)


state 84

    (94) termino -> factor termino1 .

    PLUS            reduce using rule 94 (termino -> factor termino1 .)
    MINUS           reduce using rule 94 (termino -> factor termino1 .)
    LESS            reduce using rule 94 (termino -> factor termino1 .)
    LESSO           reduce using rule 94 (termino -> factor termino1 .)
    GREATER         reduce using rule 94 (termino -> factor termino1 .)
    GREATERO        reduce using rule 94 (termino -> factor termino1 .)
    NOTEQUAL        reduce using rule 94 (termino -> factor termino1 .)
    EQUALS          reduce using rule 94 (termino -> factor termino1 .)
    AND             reduce using rule 94 (termino -> factor termino1 .)
    OR              reduce using rule 94 (termino -> factor termino1 .)
    RBRACKET        reduce using rule 94 (termino -> factor termino1 .)
    RPAREN          reduce using rule 94 (termino -> factor termino1 .)
    COMMA           reduce using rule 94 (termino -> factor termino1 .)
    SEMICOLON       reduce using rule 94 (termino -> factor termino1 .)


state 85

    (95) termino1 -> TIMES . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    factor                         shift and go to state 103
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 86

    (96) termino1 -> DIVIDE . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    factor                         shift and go to state 104
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 87

    (97) termino1 -> empty .

    PLUS            reduce using rule 97 (termino1 -> empty .)
    MINUS           reduce using rule 97 (termino1 -> empty .)
    LESS            reduce using rule 97 (termino1 -> empty .)
    LESSO           reduce using rule 97 (termino1 -> empty .)
    GREATER         reduce using rule 97 (termino1 -> empty .)
    GREATERO        reduce using rule 97 (termino1 -> empty .)
    NOTEQUAL        reduce using rule 97 (termino1 -> empty .)
    EQUALS          reduce using rule 97 (termino1 -> empty .)
    AND             reduce using rule 97 (termino1 -> empty .)
    OR              reduce using rule 97 (termino1 -> empty .)
    RBRACKET        reduce using rule 97 (termino1 -> empty .)
    RPAREN          reduce using rule 97 (termino1 -> empty .)
    COMMA           reduce using rule 97 (termino1 -> empty .)
    SEMICOLON       reduce using rule 97 (termino1 -> empty .)


state 88

    (98) factor -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 105


state 89

    (105) varcte -> CTEI .

    TIMES           reduce using rule 105 (varcte -> CTEI .)
    DIVIDE          reduce using rule 105 (varcte -> CTEI .)
    PLUS            reduce using rule 105 (varcte -> CTEI .)
    MINUS           reduce using rule 105 (varcte -> CTEI .)
    LESS            reduce using rule 105 (varcte -> CTEI .)
    LESSO           reduce using rule 105 (varcte -> CTEI .)
    GREATER         reduce using rule 105 (varcte -> CTEI .)
    GREATERO        reduce using rule 105 (varcte -> CTEI .)
    NOTEQUAL        reduce using rule 105 (varcte -> CTEI .)
    EQUALS          reduce using rule 105 (varcte -> CTEI .)
    AND             reduce using rule 105 (varcte -> CTEI .)
    OR              reduce using rule 105 (varcte -> CTEI .)
    RPAREN          reduce using rule 105 (varcte -> CTEI .)
    COMMA           reduce using rule 105 (varcte -> CTEI .)
    RBRACKET        reduce using rule 105 (varcte -> CTEI .)
    SEMICOLON       reduce using rule 105 (varcte -> CTEI .)


state 90

    (47) llamada -> iniciaLlamada llamada2 . endLlamada RPAREN
    (52) endLlamada -> .

    RPAREN          reduce using rule 52 (endLlamada -> .)

    endLlamada                     shift and go to state 106

state 91

    (48) llamada -> iniciaLlamada endLlamada . RPAREN

    RPAREN          shift and go to state 107


state 92

    (50) llamada2 -> exp . COMMA llamada2
    (51) llamada2 -> exp .

    COMMA           shift and go to state 108
    RPAREN          reduce using rule 51 (llamada2 -> exp .)


state 93

    (41) main -> printfuncs PRINCIPAL LPAREN RPAREN . fillFirst bloque
    (42) fillFirst -> . empty
    (1) empty -> .

    LCURLY          reduce using rule 1 (empty -> .)

    fillFirst                      shift and go to state 109
    empty                          shift and go to state 110

state 94

    (19) func_decl -> FUNCION func2 func3 LPAREN params . RPAREN vars bloque endFunc
    (21) func_decl -> FUNCION func2 func3 LPAREN params . RPAREN bloque endFunc
    (44) params -> params . COMMA param_decl

    RPAREN          shift and go to state 111
    COMMA           shift and go to state 112


state 95

    (20) func_decl -> FUNCION func2 func3 LPAREN RPAREN . vars bloque endFunc
    (22) func_decl -> FUNCION func2 func3 LPAREN RPAREN . bloque endFunc
    (5) vars -> . VAR var2
    (27) bloque -> . LCURLY bloque1 RCURLY

    VAR             shift and go to state 8
    LCURLY          shift and go to state 115

    vars                           shift and go to state 113
    bloque                         shift and go to state 114

state 96

    (45) params -> param_decl .

    RPAREN          reduce using rule 45 (params -> param_decl .)
    COMMA           reduce using rule 45 (params -> param_decl .)


state 97

    (43) param_decl -> tipo . ID

    ID              shift and go to state 116


state 98

    (103) dimension -> LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 117


state 99

    (75) exp1 -> OR texp . exp1
    (75) exp1 -> . OR texp exp1
    (76) exp1 -> . empty
    (1) empty -> .

    OR              shift and go to state 65
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    exp1                           shift and go to state 118
    empty                          shift and go to state 66

state 100

    (78) texp1 -> AND gexp . texp1
    (78) texp1 -> . AND gexp texp1
    (79) texp1 -> . empty
    (1) empty -> .

    AND             shift and go to state 68
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    texp1                          shift and go to state 119
    empty                          shift and go to state 69

state 101

    (81) gexp1 -> gexp2 mexp . gexp1
    (81) gexp1 -> . gexp2 mexp gexp1
    (82) gexp1 -> . empty
    (83) gexp2 -> . LESS
    (84) gexp2 -> . LESSO
    (85) gexp2 -> . GREATER
    (86) gexp2 -> . GREATERO
    (87) gexp2 -> . NOTEQUAL
    (88) gexp2 -> . EQUALS
    (1) empty -> .

    LESS            shift and go to state 73
    LESSO           shift and go to state 74
    GREATER         shift and go to state 75
    GREATERO        shift and go to state 76
    NOTEQUAL        shift and go to state 77
    EQUALS          shift and go to state 78
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    gexp2                          shift and go to state 71
    gexp1                          shift and go to state 120
    empty                          shift and go to state 72

state 102

    (90) mexp1 -> mexp2 termino . mexp1
    (90) mexp1 -> . mexp2 termino mexp1
    (91) mexp1 -> . empty
    (92) mexp2 -> . PLUS
    (93) mexp2 -> . MINUS
    (1) empty -> .

    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    LESS            reduce using rule 1 (empty -> .)
    LESSO           reduce using rule 1 (empty -> .)
    GREATER         reduce using rule 1 (empty -> .)
    GREATERO        reduce using rule 1 (empty -> .)
    NOTEQUAL        reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    mexp2                          shift and go to state 80
    mexp1                          shift and go to state 121
    empty                          shift and go to state 81

state 103

    (95) termino1 -> TIMES factor . termino1
    (95) termino1 -> . TIMES factor termino1
    (96) termino1 -> . DIVIDE factor termino1
    (97) termino1 -> . empty
    (1) empty -> .

    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 86
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    LESSO           reduce using rule 1 (empty -> .)
    GREATER         reduce using rule 1 (empty -> .)
    GREATERO        reduce using rule 1 (empty -> .)
    NOTEQUAL        reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    termino1                       shift and go to state 122
    empty                          shift and go to state 87

state 104

    (96) termino1 -> DIVIDE factor . termino1
    (95) termino1 -> . TIMES factor termino1
    (96) termino1 -> . DIVIDE factor termino1
    (97) termino1 -> . empty
    (1) empty -> .

    TIMES           shift and go to state 85
    DIVIDE          shift and go to state 86
    PLUS            reduce using rule 1 (empty -> .)
    MINUS           reduce using rule 1 (empty -> .)
    LESS            reduce using rule 1 (empty -> .)
    LESSO           reduce using rule 1 (empty -> .)
    GREATER         reduce using rule 1 (empty -> .)
    GREATERO        reduce using rule 1 (empty -> .)
    NOTEQUAL        reduce using rule 1 (empty -> .)
    EQUALS          reduce using rule 1 (empty -> .)
    AND             reduce using rule 1 (empty -> .)
    OR              reduce using rule 1 (empty -> .)
    RBRACKET        reduce using rule 1 (empty -> .)
    RPAREN          reduce using rule 1 (empty -> .)
    COMMA           reduce using rule 1 (empty -> .)
    SEMICOLON       reduce using rule 1 (empty -> .)

    termino1                       shift and go to state 123
    empty                          shift and go to state 87

state 105

    (98) factor -> LPAREN exp RPAREN .

    TIMES           reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    LESS            reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    LESSO           reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    GREATERO        reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    NOTEQUAL        reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    AND             reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    OR              reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 98 (factor -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 98 (factor -> LPAREN exp RPAREN .)


state 106

    (47) llamada -> iniciaLlamada llamada2 endLlamada . RPAREN

    RPAREN          shift and go to state 124


state 107

    (48) llamada -> iniciaLlamada endLlamada RPAREN .

    TIMES           reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    DIVIDE          reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    PLUS            reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    MINUS           reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    LESS            reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    LESSO           reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    GREATER         reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    GREATERO        reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    NOTEQUAL        reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    EQUALS          reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    AND             reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    OR              reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    RBRACKET        reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    RPAREN          reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    COMMA           reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)
    SEMICOLON       reduce using rule 48 (llamada -> iniciaLlamada endLlamada RPAREN .)


state 108

    (50) llamada2 -> exp COMMA . llamada2
    (50) llamada2 -> . exp COMMA llamada2
    (51) llamada2 -> . exp
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    exp                            shift and go to state 92
    llamada2                       shift and go to state 125
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 109

    (41) main -> printfuncs PRINCIPAL LPAREN RPAREN fillFirst . bloque
    (27) bloque -> . LCURLY bloque1 RCURLY

    LCURLY          shift and go to state 115

    bloque                         shift and go to state 126

state 110

    (42) fillFirst -> empty .

    LCURLY          reduce using rule 42 (fillFirst -> empty .)


state 111

    (19) func_decl -> FUNCION func2 func3 LPAREN params RPAREN . vars bloque endFunc
    (21) func_decl -> FUNCION func2 func3 LPAREN params RPAREN . bloque endFunc
    (5) vars -> . VAR var2
    (27) bloque -> . LCURLY bloque1 RCURLY

    VAR             shift and go to state 8
    LCURLY          shift and go to state 115

    vars                           shift and go to state 127
    bloque                         shift and go to state 128

state 112

    (44) params -> params COMMA . param_decl
    (43) param_decl -> . tipo ID
    (14) tipo -> . INT
    (15) tipo -> . FLOAT
    (16) tipo -> . CHAR

    INT             shift and go to state 14
    FLOAT           shift and go to state 15
    CHAR            shift and go to state 16

    param_decl                     shift and go to state 129
    tipo                           shift and go to state 97

state 113

    (20) func_decl -> FUNCION func2 func3 LPAREN RPAREN vars . bloque endFunc
    (27) bloque -> . LCURLY bloque1 RCURLY

    LCURLY          shift and go to state 115

    bloque                         shift and go to state 130

state 114

    (22) func_decl -> FUNCION func2 func3 LPAREN RPAREN bloque . endFunc
    (26) endFunc -> . empty
    (1) empty -> .

    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)

    endFunc                        shift and go to state 131
    empty                          shift and go to state 132

state 115

    (27) bloque -> LCURLY . bloque1 RCURLY
    (28) bloque1 -> . estatuto bloque1
    (29) bloque1 -> . empty
    (30) estatuto -> . asig
    (31) estatuto -> . cond
    (32) estatuto -> . retorno
    (33) estatuto -> . lectura
    (34) estatuto -> . escritura
    (35) estatuto -> . llamada SEMICOLON
    (36) estatuto -> . repeticion
    (1) empty -> .
    (37) asig -> . variable addVar EQUAL addAsig exp genAsig SEMICOLON
    (59) cond -> . SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2
    (46) retorno -> . REGRESA LPAREN exp RPAREN SEMICOLON
    (53) lectura -> . LEE LPAREN variable RPAREN SEMICOLON
    (54) escritura -> . ESCRIBE LPAREN escritura2 RPAREN SEMICOLON
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (65) repeticion -> . condicional
    (66) repeticion -> . nocondicional
    (102) variable -> . ID dimension
    (49) iniciaLlamada -> . ID LPAREN
    (67) condicional -> . MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile
    (71) nocondicional -> . DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor

    RCURLY          reduce using rule 1 (empty -> .)
    SI              shift and go to state 144
    REGRESA         shift and go to state 145
    LEE             shift and go to state 146
    ESCRIBE         shift and go to state 147
    ID              shift and go to state 41
    MIENTRAS        shift and go to state 150
    DESDE           shift and go to state 151

    bloque1                        shift and go to state 133
    estatuto                       shift and go to state 134
    empty                          shift and go to state 135
    asig                           shift and go to state 136
    cond                           shift and go to state 137
    retorno                        shift and go to state 138
    lectura                        shift and go to state 139
    escritura                      shift and go to state 140
    llamada                        shift and go to state 141
    repeticion                     shift and go to state 142
    variable                       shift and go to state 143
    iniciaLlamada                  shift and go to state 55
    condicional                    shift and go to state 148
    nocondicional                  shift and go to state 149

state 116

    (43) param_decl -> tipo ID .

    RPAREN          reduce using rule 43 (param_decl -> tipo ID .)
    COMMA           reduce using rule 43 (param_decl -> tipo ID .)


state 117

    (103) dimension -> LBRACKET exp RBRACKET .

    TIMES           reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    LESS            reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    LESSO           reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    GREATER         reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    GREATERO        reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    NOTEQUAL        reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)
    EQUAL           reduce using rule 103 (dimension -> LBRACKET exp RBRACKET .)


state 118

    (75) exp1 -> OR texp exp1 .

    RBRACKET        reduce using rule 75 (exp1 -> OR texp exp1 .)
    RPAREN          reduce using rule 75 (exp1 -> OR texp exp1 .)
    COMMA           reduce using rule 75 (exp1 -> OR texp exp1 .)
    SEMICOLON       reduce using rule 75 (exp1 -> OR texp exp1 .)


state 119

    (78) texp1 -> AND gexp texp1 .

    OR              reduce using rule 78 (texp1 -> AND gexp texp1 .)
    RBRACKET        reduce using rule 78 (texp1 -> AND gexp texp1 .)
    RPAREN          reduce using rule 78 (texp1 -> AND gexp texp1 .)
    COMMA           reduce using rule 78 (texp1 -> AND gexp texp1 .)
    SEMICOLON       reduce using rule 78 (texp1 -> AND gexp texp1 .)


state 120

    (81) gexp1 -> gexp2 mexp gexp1 .

    AND             reduce using rule 81 (gexp1 -> gexp2 mexp gexp1 .)
    OR              reduce using rule 81 (gexp1 -> gexp2 mexp gexp1 .)
    RBRACKET        reduce using rule 81 (gexp1 -> gexp2 mexp gexp1 .)
    RPAREN          reduce using rule 81 (gexp1 -> gexp2 mexp gexp1 .)
    COMMA           reduce using rule 81 (gexp1 -> gexp2 mexp gexp1 .)
    SEMICOLON       reduce using rule 81 (gexp1 -> gexp2 mexp gexp1 .)


state 121

    (90) mexp1 -> mexp2 termino mexp1 .

    LESS            reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    LESSO           reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    GREATER         reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    GREATERO        reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    NOTEQUAL        reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    EQUALS          reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    AND             reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    OR              reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    RBRACKET        reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    RPAREN          reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    COMMA           reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)
    SEMICOLON       reduce using rule 90 (mexp1 -> mexp2 termino mexp1 .)


state 122

    (95) termino1 -> TIMES factor termino1 .

    PLUS            reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    MINUS           reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    LESS            reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    LESSO           reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    GREATER         reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    GREATERO        reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    NOTEQUAL        reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    EQUALS          reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    AND             reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    OR              reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    RBRACKET        reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    RPAREN          reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    COMMA           reduce using rule 95 (termino1 -> TIMES factor termino1 .)
    SEMICOLON       reduce using rule 95 (termino1 -> TIMES factor termino1 .)


state 123

    (96) termino1 -> DIVIDE factor termino1 .

    PLUS            reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    MINUS           reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    LESS            reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    LESSO           reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    GREATER         reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    GREATERO        reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    NOTEQUAL        reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    EQUALS          reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    AND             reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    OR              reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    RBRACKET        reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    RPAREN          reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    COMMA           reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)
    SEMICOLON       reduce using rule 96 (termino1 -> DIVIDE factor termino1 .)


state 124

    (47) llamada -> iniciaLlamada llamada2 endLlamada RPAREN .

    TIMES           reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    DIVIDE          reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    PLUS            reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    MINUS           reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    LESS            reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    LESSO           reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    GREATER         reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    GREATERO        reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    NOTEQUAL        reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    EQUALS          reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    AND             reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    OR              reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    RBRACKET        reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    RPAREN          reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    COMMA           reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)
    SEMICOLON       reduce using rule 47 (llamada -> iniciaLlamada llamada2 endLlamada RPAREN .)


state 125

    (50) llamada2 -> exp COMMA llamada2 .

    RPAREN          reduce using rule 50 (llamada2 -> exp COMMA llamada2 .)


state 126

    (41) main -> printfuncs PRINCIPAL LPAREN RPAREN fillFirst bloque .

    $end            reduce using rule 41 (main -> printfuncs PRINCIPAL LPAREN RPAREN fillFirst bloque .)


state 127

    (19) func_decl -> FUNCION func2 func3 LPAREN params RPAREN vars . bloque endFunc
    (27) bloque -> . LCURLY bloque1 RCURLY

    LCURLY          shift and go to state 115

    bloque                         shift and go to state 152

state 128

    (21) func_decl -> FUNCION func2 func3 LPAREN params RPAREN bloque . endFunc
    (26) endFunc -> . empty
    (1) empty -> .

    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)

    endFunc                        shift and go to state 153
    empty                          shift and go to state 132

state 129

    (44) params -> params COMMA param_decl .

    RPAREN          reduce using rule 44 (params -> params COMMA param_decl .)
    COMMA           reduce using rule 44 (params -> params COMMA param_decl .)


state 130

    (20) func_decl -> FUNCION func2 func3 LPAREN RPAREN vars bloque . endFunc
    (26) endFunc -> . empty
    (1) empty -> .

    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)

    endFunc                        shift and go to state 154
    empty                          shift and go to state 132

state 131

    (22) func_decl -> FUNCION func2 func3 LPAREN RPAREN bloque endFunc .

    FUNCION         reduce using rule 22 (func_decl -> FUNCION func2 func3 LPAREN RPAREN bloque endFunc .)
    PRINCIPAL       reduce using rule 22 (func_decl -> FUNCION func2 func3 LPAREN RPAREN bloque endFunc .)


state 132

    (26) endFunc -> empty .

    FUNCION         reduce using rule 26 (endFunc -> empty .)
    PRINCIPAL       reduce using rule 26 (endFunc -> empty .)


state 133

    (27) bloque -> LCURLY bloque1 . RCURLY

    RCURLY          shift and go to state 155


state 134

    (28) bloque1 -> estatuto . bloque1
    (28) bloque1 -> . estatuto bloque1
    (29) bloque1 -> . empty
    (30) estatuto -> . asig
    (31) estatuto -> . cond
    (32) estatuto -> . retorno
    (33) estatuto -> . lectura
    (34) estatuto -> . escritura
    (35) estatuto -> . llamada SEMICOLON
    (36) estatuto -> . repeticion
    (1) empty -> .
    (37) asig -> . variable addVar EQUAL addAsig exp genAsig SEMICOLON
    (59) cond -> . SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2
    (46) retorno -> . REGRESA LPAREN exp RPAREN SEMICOLON
    (53) lectura -> . LEE LPAREN variable RPAREN SEMICOLON
    (54) escritura -> . ESCRIBE LPAREN escritura2 RPAREN SEMICOLON
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (65) repeticion -> . condicional
    (66) repeticion -> . nocondicional
    (102) variable -> . ID dimension
    (49) iniciaLlamada -> . ID LPAREN
    (67) condicional -> . MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile
    (71) nocondicional -> . DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor

    RCURLY          reduce using rule 1 (empty -> .)
    SI              shift and go to state 144
    REGRESA         shift and go to state 145
    LEE             shift and go to state 146
    ESCRIBE         shift and go to state 147
    ID              shift and go to state 41
    MIENTRAS        shift and go to state 150
    DESDE           shift and go to state 151

    estatuto                       shift and go to state 134
    bloque1                        shift and go to state 156
    empty                          shift and go to state 135
    asig                           shift and go to state 136
    cond                           shift and go to state 137
    retorno                        shift and go to state 138
    lectura                        shift and go to state 139
    escritura                      shift and go to state 140
    llamada                        shift and go to state 141
    repeticion                     shift and go to state 142
    variable                       shift and go to state 143
    iniciaLlamada                  shift and go to state 55
    condicional                    shift and go to state 148
    nocondicional                  shift and go to state 149

state 135

    (29) bloque1 -> empty .

    RCURLY          reduce using rule 29 (bloque1 -> empty .)


state 136

    (30) estatuto -> asig .

    SI              reduce using rule 30 (estatuto -> asig .)
    REGRESA         reduce using rule 30 (estatuto -> asig .)
    LEE             reduce using rule 30 (estatuto -> asig .)
    ESCRIBE         reduce using rule 30 (estatuto -> asig .)
    ID              reduce using rule 30 (estatuto -> asig .)
    MIENTRAS        reduce using rule 30 (estatuto -> asig .)
    DESDE           reduce using rule 30 (estatuto -> asig .)
    RCURLY          reduce using rule 30 (estatuto -> asig .)


state 137

    (31) estatuto -> cond .

    SI              reduce using rule 31 (estatuto -> cond .)
    REGRESA         reduce using rule 31 (estatuto -> cond .)
    LEE             reduce using rule 31 (estatuto -> cond .)
    ESCRIBE         reduce using rule 31 (estatuto -> cond .)
    ID              reduce using rule 31 (estatuto -> cond .)
    MIENTRAS        reduce using rule 31 (estatuto -> cond .)
    DESDE           reduce using rule 31 (estatuto -> cond .)
    RCURLY          reduce using rule 31 (estatuto -> cond .)


state 138

    (32) estatuto -> retorno .

    SI              reduce using rule 32 (estatuto -> retorno .)
    REGRESA         reduce using rule 32 (estatuto -> retorno .)
    LEE             reduce using rule 32 (estatuto -> retorno .)
    ESCRIBE         reduce using rule 32 (estatuto -> retorno .)
    ID              reduce using rule 32 (estatuto -> retorno .)
    MIENTRAS        reduce using rule 32 (estatuto -> retorno .)
    DESDE           reduce using rule 32 (estatuto -> retorno .)
    RCURLY          reduce using rule 32 (estatuto -> retorno .)


state 139

    (33) estatuto -> lectura .

    SI              reduce using rule 33 (estatuto -> lectura .)
    REGRESA         reduce using rule 33 (estatuto -> lectura .)
    LEE             reduce using rule 33 (estatuto -> lectura .)
    ESCRIBE         reduce using rule 33 (estatuto -> lectura .)
    ID              reduce using rule 33 (estatuto -> lectura .)
    MIENTRAS        reduce using rule 33 (estatuto -> lectura .)
    DESDE           reduce using rule 33 (estatuto -> lectura .)
    RCURLY          reduce using rule 33 (estatuto -> lectura .)


state 140

    (34) estatuto -> escritura .

    SI              reduce using rule 34 (estatuto -> escritura .)
    REGRESA         reduce using rule 34 (estatuto -> escritura .)
    LEE             reduce using rule 34 (estatuto -> escritura .)
    ESCRIBE         reduce using rule 34 (estatuto -> escritura .)
    ID              reduce using rule 34 (estatuto -> escritura .)
    MIENTRAS        reduce using rule 34 (estatuto -> escritura .)
    DESDE           reduce using rule 34 (estatuto -> escritura .)
    RCURLY          reduce using rule 34 (estatuto -> escritura .)


state 141

    (35) estatuto -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 157


state 142

    (36) estatuto -> repeticion .

    SI              reduce using rule 36 (estatuto -> repeticion .)
    REGRESA         reduce using rule 36 (estatuto -> repeticion .)
    LEE             reduce using rule 36 (estatuto -> repeticion .)
    ESCRIBE         reduce using rule 36 (estatuto -> repeticion .)
    ID              reduce using rule 36 (estatuto -> repeticion .)
    MIENTRAS        reduce using rule 36 (estatuto -> repeticion .)
    DESDE           reduce using rule 36 (estatuto -> repeticion .)
    RCURLY          reduce using rule 36 (estatuto -> repeticion .)


state 143

    (37) asig -> variable . addVar EQUAL addAsig exp genAsig SEMICOLON
    (38) addVar -> .

    EQUAL           reduce using rule 38 (addVar -> .)

    addVar                         shift and go to state 158

state 144

    (59) cond -> SI . LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2

    LPAREN          shift and go to state 159


state 145

    (46) retorno -> REGRESA . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 160


state 146

    (53) lectura -> LEE . LPAREN variable RPAREN SEMICOLON

    LPAREN          shift and go to state 161


state 147

    (54) escritura -> ESCRIBE . LPAREN escritura2 RPAREN SEMICOLON

    LPAREN          shift and go to state 162


state 148

    (65) repeticion -> condicional .

    SI              reduce using rule 65 (repeticion -> condicional .)
    REGRESA         reduce using rule 65 (repeticion -> condicional .)
    LEE             reduce using rule 65 (repeticion -> condicional .)
    ESCRIBE         reduce using rule 65 (repeticion -> condicional .)
    ID              reduce using rule 65 (repeticion -> condicional .)
    MIENTRAS        reduce using rule 65 (repeticion -> condicional .)
    DESDE           reduce using rule 65 (repeticion -> condicional .)
    RCURLY          reduce using rule 65 (repeticion -> condicional .)


state 149

    (66) repeticion -> nocondicional .

    SI              reduce using rule 66 (repeticion -> nocondicional .)
    REGRESA         reduce using rule 66 (repeticion -> nocondicional .)
    LEE             reduce using rule 66 (repeticion -> nocondicional .)
    ESCRIBE         reduce using rule 66 (repeticion -> nocondicional .)
    ID              reduce using rule 66 (repeticion -> nocondicional .)
    MIENTRAS        reduce using rule 66 (repeticion -> nocondicional .)
    DESDE           reduce using rule 66 (repeticion -> nocondicional .)
    RCURLY          reduce using rule 66 (repeticion -> nocondicional .)


state 150

    (67) condicional -> MIENTRAS . regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile
    (68) regWhile -> . empty
    (1) empty -> .

    LPAREN          reduce using rule 1 (empty -> .)

    regWhile                       shift and go to state 163
    empty                          shift and go to state 164

state 151

    (71) nocondicional -> DESDE . ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor

    ID              shift and go to state 165


state 152

    (19) func_decl -> FUNCION func2 func3 LPAREN params RPAREN vars bloque . endFunc
    (26) endFunc -> . empty
    (1) empty -> .

    FUNCION         reduce using rule 1 (empty -> .)
    PRINCIPAL       reduce using rule 1 (empty -> .)

    endFunc                        shift and go to state 166
    empty                          shift and go to state 132

state 153

    (21) func_decl -> FUNCION func2 func3 LPAREN params RPAREN bloque endFunc .

    FUNCION         reduce using rule 21 (func_decl -> FUNCION func2 func3 LPAREN params RPAREN bloque endFunc .)
    PRINCIPAL       reduce using rule 21 (func_decl -> FUNCION func2 func3 LPAREN params RPAREN bloque endFunc .)


state 154

    (20) func_decl -> FUNCION func2 func3 LPAREN RPAREN vars bloque endFunc .

    FUNCION         reduce using rule 20 (func_decl -> FUNCION func2 func3 LPAREN RPAREN vars bloque endFunc .)
    PRINCIPAL       reduce using rule 20 (func_decl -> FUNCION func2 func3 LPAREN RPAREN vars bloque endFunc .)


state 155

    (27) bloque -> LCURLY bloque1 RCURLY .

    FUNCION         reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    PRINCIPAL       reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    $end            reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    SINO            reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    SI              reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    REGRESA         reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    LEE             reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    ESCRIBE         reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    ID              reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    MIENTRAS        reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    DESDE           reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)
    RCURLY          reduce using rule 27 (bloque -> LCURLY bloque1 RCURLY .)


state 156

    (28) bloque1 -> estatuto bloque1 .

    RCURLY          reduce using rule 28 (bloque1 -> estatuto bloque1 .)


state 157

    (35) estatuto -> llamada SEMICOLON .

    SI              reduce using rule 35 (estatuto -> llamada SEMICOLON .)
    REGRESA         reduce using rule 35 (estatuto -> llamada SEMICOLON .)
    LEE             reduce using rule 35 (estatuto -> llamada SEMICOLON .)
    ESCRIBE         reduce using rule 35 (estatuto -> llamada SEMICOLON .)
    ID              reduce using rule 35 (estatuto -> llamada SEMICOLON .)
    MIENTRAS        reduce using rule 35 (estatuto -> llamada SEMICOLON .)
    DESDE           reduce using rule 35 (estatuto -> llamada SEMICOLON .)
    RCURLY          reduce using rule 35 (estatuto -> llamada SEMICOLON .)


state 158

    (37) asig -> variable addVar . EQUAL addAsig exp genAsig SEMICOLON

    EQUAL           shift and go to state 167


state 159

    (59) cond -> SI LPAREN . exp RPAREN cond1 ENTONCES bloque elsePart cond2
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    exp                            shift and go to state 168
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 160

    (46) retorno -> REGRESA LPAREN . exp RPAREN SEMICOLON
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    exp                            shift and go to state 169
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 161

    (53) lectura -> LEE LPAREN . variable RPAREN SEMICOLON
    (102) variable -> . ID dimension

    ID              shift and go to state 171

    variable                       shift and go to state 170

state 162

    (54) escritura -> ESCRIBE LPAREN . escritura2 RPAREN SEMICOLON
    (57) escritura2 -> . escritura1 COMMA escritura2
    (58) escritura2 -> . escritura1
    (55) escritura1 -> . CTES
    (56) escritura1 -> . exp
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    CTES            shift and go to state 174
    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    escritura2                     shift and go to state 172
    escritura1                     shift and go to state 173
    exp                            shift and go to state 175
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 163

    (67) condicional -> MIENTRAS regWhile . LPAREN exp RPAREN whileCond HAZ bloque endWhile

    LPAREN          shift and go to state 176


state 164

    (68) regWhile -> empty .

    LPAREN          reduce using rule 68 (regWhile -> empty .)


state 165

    (71) nocondicional -> DESDE ID . EQUAL CTEI HASTA CTEI createFor HACER bloque endFor

    EQUAL           shift and go to state 177


state 166

    (19) func_decl -> FUNCION func2 func3 LPAREN params RPAREN vars bloque endFunc .

    FUNCION         reduce using rule 19 (func_decl -> FUNCION func2 func3 LPAREN params RPAREN vars bloque endFunc .)
    PRINCIPAL       reduce using rule 19 (func_decl -> FUNCION func2 func3 LPAREN params RPAREN vars bloque endFunc .)


state 167

    (37) asig -> variable addVar EQUAL . addAsig exp genAsig SEMICOLON
    (39) addAsig -> .

    LPAREN          reduce using rule 39 (addAsig -> .)
    CTEI            reduce using rule 39 (addAsig -> .)
    CTEF            reduce using rule 39 (addAsig -> .)
    CTEC            reduce using rule 39 (addAsig -> .)
    ID              reduce using rule 39 (addAsig -> .)

    addAsig                        shift and go to state 178

state 168

    (59) cond -> SI LPAREN exp . RPAREN cond1 ENTONCES bloque elsePart cond2

    RPAREN          shift and go to state 179


state 169

    (46) retorno -> REGRESA LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 180


state 170

    (53) lectura -> LEE LPAREN variable . RPAREN SEMICOLON

    RPAREN          shift and go to state 181


state 171

    (102) variable -> ID . dimension
    (103) dimension -> . LBRACKET exp RBRACKET
    (104) dimension -> . empty
    (1) empty -> .

    LBRACKET        shift and go to state 60
    RPAREN          reduce using rule 1 (empty -> .)

    dimension                      shift and go to state 58
    empty                          shift and go to state 61

state 172

    (54) escritura -> ESCRIBE LPAREN escritura2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 182


state 173

    (57) escritura2 -> escritura1 . COMMA escritura2
    (58) escritura2 -> escritura1 .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 58 (escritura2 -> escritura1 .)


state 174

    (55) escritura1 -> CTES .

    COMMA           reduce using rule 55 (escritura1 -> CTES .)
    RPAREN          reduce using rule 55 (escritura1 -> CTES .)


state 175

    (56) escritura1 -> exp .

    COMMA           reduce using rule 56 (escritura1 -> exp .)
    RPAREN          reduce using rule 56 (escritura1 -> exp .)


state 176

    (67) condicional -> MIENTRAS regWhile LPAREN . exp RPAREN whileCond HAZ bloque endWhile
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    exp                            shift and go to state 184
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 177

    (71) nocondicional -> DESDE ID EQUAL . CTEI HASTA CTEI createFor HACER bloque endFor

    CTEI            shift and go to state 185


state 178

    (37) asig -> variable addVar EQUAL addAsig . exp genAsig SEMICOLON
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    variable                       shift and go to state 51
    exp                            shift and go to state 186
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 179

    (59) cond -> SI LPAREN exp RPAREN . cond1 ENTONCES bloque elsePart cond2
    (60) cond1 -> . empty
    (1) empty -> .

    ENTONCES        reduce using rule 1 (empty -> .)

    cond1                          shift and go to state 187
    empty                          shift and go to state 188

state 180

    (46) retorno -> REGRESA LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 189


state 181

    (53) lectura -> LEE LPAREN variable RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 190


state 182

    (54) escritura -> ESCRIBE LPAREN escritura2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 191


state 183

    (57) escritura2 -> escritura1 COMMA . escritura2
    (57) escritura2 -> . escritura1 COMMA escritura2
    (58) escritura2 -> . escritura1
    (55) escritura1 -> . CTES
    (56) escritura1 -> . exp
    (74) exp -> . texp exp1
    (77) texp -> . gexp texp1
    (80) gexp -> . mexp gexp1
    (89) mexp -> . termino mexp1
    (94) termino -> . factor termino1
    (98) factor -> . LPAREN exp RPAREN
    (99) factor -> . varcte
    (100) factor -> . variable
    (101) factor -> . llamada
    (105) varcte -> . CTEI
    (106) varcte -> . CTEF
    (107) varcte -> . CTEC
    (102) variable -> . ID dimension
    (47) llamada -> . iniciaLlamada llamada2 endLlamada RPAREN
    (48) llamada -> . iniciaLlamada endLlamada RPAREN
    (49) iniciaLlamada -> . ID LPAREN

    CTES            shift and go to state 174
    LPAREN          shift and go to state 49
    CTEI            shift and go to state 89
    CTEF            shift and go to state 53
    CTEC            shift and go to state 54
    ID              shift and go to state 41

    escritura1                     shift and go to state 173
    escritura2                     shift and go to state 192
    exp                            shift and go to state 175
    texp                           shift and go to state 44
    gexp                           shift and go to state 45
    mexp                           shift and go to state 46
    termino                        shift and go to state 47
    factor                         shift and go to state 48
    varcte                         shift and go to state 50
    variable                       shift and go to state 51
    llamada                        shift and go to state 52
    iniciaLlamada                  shift and go to state 55

state 184

    (67) condicional -> MIENTRAS regWhile LPAREN exp . RPAREN whileCond HAZ bloque endWhile

    RPAREN          shift and go to state 193


state 185

    (71) nocondicional -> DESDE ID EQUAL CTEI . HASTA CTEI createFor HACER bloque endFor

    HASTA           shift and go to state 194


state 186

    (37) asig -> variable addVar EQUAL addAsig exp . genAsig SEMICOLON
    (40) genAsig -> .

    SEMICOLON       reduce using rule 40 (genAsig -> .)

    genAsig                        shift and go to state 195

state 187

    (59) cond -> SI LPAREN exp RPAREN cond1 . ENTONCES bloque elsePart cond2

    ENTONCES        shift and go to state 196


state 188

    (60) cond1 -> empty .

    ENTONCES        reduce using rule 60 (cond1 -> empty .)


state 189

    (46) retorno -> REGRESA LPAREN exp RPAREN SEMICOLON .

    SI              reduce using rule 46 (retorno -> REGRESA LPAREN exp RPAREN SEMICOLON .)
    REGRESA         reduce using rule 46 (retorno -> REGRESA LPAREN exp RPAREN SEMICOLON .)
    LEE             reduce using rule 46 (retorno -> REGRESA LPAREN exp RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 46 (retorno -> REGRESA LPAREN exp RPAREN SEMICOLON .)
    ID              reduce using rule 46 (retorno -> REGRESA LPAREN exp RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 46 (retorno -> REGRESA LPAREN exp RPAREN SEMICOLON .)
    DESDE           reduce using rule 46 (retorno -> REGRESA LPAREN exp RPAREN SEMICOLON .)
    RCURLY          reduce using rule 46 (retorno -> REGRESA LPAREN exp RPAREN SEMICOLON .)


state 190

    (53) lectura -> LEE LPAREN variable RPAREN SEMICOLON .

    SI              reduce using rule 53 (lectura -> LEE LPAREN variable RPAREN SEMICOLON .)
    REGRESA         reduce using rule 53 (lectura -> LEE LPAREN variable RPAREN SEMICOLON .)
    LEE             reduce using rule 53 (lectura -> LEE LPAREN variable RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 53 (lectura -> LEE LPAREN variable RPAREN SEMICOLON .)
    ID              reduce using rule 53 (lectura -> LEE LPAREN variable RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 53 (lectura -> LEE LPAREN variable RPAREN SEMICOLON .)
    DESDE           reduce using rule 53 (lectura -> LEE LPAREN variable RPAREN SEMICOLON .)
    RCURLY          reduce using rule 53 (lectura -> LEE LPAREN variable RPAREN SEMICOLON .)


state 191

    (54) escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON .

    SI              reduce using rule 54 (escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON .)
    REGRESA         reduce using rule 54 (escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON .)
    LEE             reduce using rule 54 (escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON .)
    ESCRIBE         reduce using rule 54 (escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON .)
    ID              reduce using rule 54 (escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON .)
    MIENTRAS        reduce using rule 54 (escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON .)
    DESDE           reduce using rule 54 (escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON .)
    RCURLY          reduce using rule 54 (escritura -> ESCRIBE LPAREN escritura2 RPAREN SEMICOLON .)


state 192

    (57) escritura2 -> escritura1 COMMA escritura2 .

    RPAREN          reduce using rule 57 (escritura2 -> escritura1 COMMA escritura2 .)


state 193

    (67) condicional -> MIENTRAS regWhile LPAREN exp RPAREN . whileCond HAZ bloque endWhile
    (69) whileCond -> . empty
    (1) empty -> .

    HAZ             reduce using rule 1 (empty -> .)

    whileCond                      shift and go to state 197
    empty                          shift and go to state 198

state 194

    (71) nocondicional -> DESDE ID EQUAL CTEI HASTA . CTEI createFor HACER bloque endFor

    CTEI            shift and go to state 199


state 195

    (37) asig -> variable addVar EQUAL addAsig exp genAsig . SEMICOLON

    SEMICOLON       shift and go to state 200


state 196

    (59) cond -> SI LPAREN exp RPAREN cond1 ENTONCES . bloque elsePart cond2
    (27) bloque -> . LCURLY bloque1 RCURLY

    LCURLY          shift and go to state 115

    bloque                         shift and go to state 201

state 197

    (67) condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond . HAZ bloque endWhile

    HAZ             shift and go to state 202


state 198

    (69) whileCond -> empty .

    HAZ             reduce using rule 69 (whileCond -> empty .)


state 199

    (71) nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI . createFor HACER bloque endFor
    (72) createFor -> .

    HACER           reduce using rule 72 (createFor -> .)

    createFor                      shift and go to state 203

state 200

    (37) asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON .

    SI              reduce using rule 37 (asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON .)
    REGRESA         reduce using rule 37 (asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON .)
    LEE             reduce using rule 37 (asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON .)
    ESCRIBE         reduce using rule 37 (asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON .)
    ID              reduce using rule 37 (asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON .)
    MIENTRAS        reduce using rule 37 (asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON .)
    DESDE           reduce using rule 37 (asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON .)
    RCURLY          reduce using rule 37 (asig -> variable addVar EQUAL addAsig exp genAsig SEMICOLON .)


state 201

    (59) cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque . elsePart cond2
    (62) elsePart -> . SINO elseActions bloque
    (63) elsePart -> . empty
    (1) empty -> .

    SINO            shift and go to state 205
    SI              reduce using rule 1 (empty -> .)
    REGRESA         reduce using rule 1 (empty -> .)
    LEE             reduce using rule 1 (empty -> .)
    ESCRIBE         reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    MIENTRAS        reduce using rule 1 (empty -> .)
    DESDE           reduce using rule 1 (empty -> .)
    RCURLY          reduce using rule 1 (empty -> .)

    elsePart                       shift and go to state 204
    empty                          shift and go to state 206

state 202

    (67) condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ . bloque endWhile
    (27) bloque -> . LCURLY bloque1 RCURLY

    LCURLY          shift and go to state 115

    bloque                         shift and go to state 207

state 203

    (71) nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor . HACER bloque endFor

    HACER           shift and go to state 208


state 204

    (59) cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart . cond2
    (61) cond2 -> . empty
    (1) empty -> .

    SI              reduce using rule 1 (empty -> .)
    REGRESA         reduce using rule 1 (empty -> .)
    LEE             reduce using rule 1 (empty -> .)
    ESCRIBE         reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    MIENTRAS        reduce using rule 1 (empty -> .)
    DESDE           reduce using rule 1 (empty -> .)
    RCURLY          reduce using rule 1 (empty -> .)

    cond2                          shift and go to state 209
    empty                          shift and go to state 210

state 205

    (62) elsePart -> SINO . elseActions bloque
    (64) elseActions -> . empty
    (1) empty -> .

    LCURLY          reduce using rule 1 (empty -> .)

    elseActions                    shift and go to state 211
    empty                          shift and go to state 212

state 206

    (63) elsePart -> empty .

    SI              reduce using rule 63 (elsePart -> empty .)
    REGRESA         reduce using rule 63 (elsePart -> empty .)
    LEE             reduce using rule 63 (elsePart -> empty .)
    ESCRIBE         reduce using rule 63 (elsePart -> empty .)
    ID              reduce using rule 63 (elsePart -> empty .)
    MIENTRAS        reduce using rule 63 (elsePart -> empty .)
    DESDE           reduce using rule 63 (elsePart -> empty .)
    RCURLY          reduce using rule 63 (elsePart -> empty .)


state 207

    (67) condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque . endWhile
    (70) endWhile -> . empty
    (1) empty -> .

    SI              reduce using rule 1 (empty -> .)
    REGRESA         reduce using rule 1 (empty -> .)
    LEE             reduce using rule 1 (empty -> .)
    ESCRIBE         reduce using rule 1 (empty -> .)
    ID              reduce using rule 1 (empty -> .)
    MIENTRAS        reduce using rule 1 (empty -> .)
    DESDE           reduce using rule 1 (empty -> .)
    RCURLY          reduce using rule 1 (empty -> .)

    endWhile                       shift and go to state 213
    empty                          shift and go to state 214

state 208

    (71) nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER . bloque endFor
    (27) bloque -> . LCURLY bloque1 RCURLY

    LCURLY          shift and go to state 115

    bloque                         shift and go to state 215

state 209

    (59) cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2 .

    SI              reduce using rule 59 (cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2 .)
    REGRESA         reduce using rule 59 (cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2 .)
    LEE             reduce using rule 59 (cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2 .)
    ESCRIBE         reduce using rule 59 (cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2 .)
    ID              reduce using rule 59 (cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2 .)
    MIENTRAS        reduce using rule 59 (cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2 .)
    DESDE           reduce using rule 59 (cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2 .)
    RCURLY          reduce using rule 59 (cond -> SI LPAREN exp RPAREN cond1 ENTONCES bloque elsePart cond2 .)


state 210

    (61) cond2 -> empty .

    SI              reduce using rule 61 (cond2 -> empty .)
    REGRESA         reduce using rule 61 (cond2 -> empty .)
    LEE             reduce using rule 61 (cond2 -> empty .)
    ESCRIBE         reduce using rule 61 (cond2 -> empty .)
    ID              reduce using rule 61 (cond2 -> empty .)
    MIENTRAS        reduce using rule 61 (cond2 -> empty .)
    DESDE           reduce using rule 61 (cond2 -> empty .)
    RCURLY          reduce using rule 61 (cond2 -> empty .)


state 211

    (62) elsePart -> SINO elseActions . bloque
    (27) bloque -> . LCURLY bloque1 RCURLY

    LCURLY          shift and go to state 115

    bloque                         shift and go to state 216

state 212

    (64) elseActions -> empty .

    LCURLY          reduce using rule 64 (elseActions -> empty .)


state 213

    (67) condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile .

    SI              reduce using rule 67 (condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile .)
    REGRESA         reduce using rule 67 (condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile .)
    LEE             reduce using rule 67 (condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile .)
    ESCRIBE         reduce using rule 67 (condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile .)
    ID              reduce using rule 67 (condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile .)
    MIENTRAS        reduce using rule 67 (condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile .)
    DESDE           reduce using rule 67 (condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile .)
    RCURLY          reduce using rule 67 (condicional -> MIENTRAS regWhile LPAREN exp RPAREN whileCond HAZ bloque endWhile .)


state 214

    (70) endWhile -> empty .

    SI              reduce using rule 70 (endWhile -> empty .)
    REGRESA         reduce using rule 70 (endWhile -> empty .)
    LEE             reduce using rule 70 (endWhile -> empty .)
    ESCRIBE         reduce using rule 70 (endWhile -> empty .)
    ID              reduce using rule 70 (endWhile -> empty .)
    MIENTRAS        reduce using rule 70 (endWhile -> empty .)
    DESDE           reduce using rule 70 (endWhile -> empty .)
    RCURLY          reduce using rule 70 (endWhile -> empty .)


state 215

    (71) nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque . endFor
    (73) endFor -> .

    SI              reduce using rule 73 (endFor -> .)
    REGRESA         reduce using rule 73 (endFor -> .)
    LEE             reduce using rule 73 (endFor -> .)
    ESCRIBE         reduce using rule 73 (endFor -> .)
    ID              reduce using rule 73 (endFor -> .)
    MIENTRAS        reduce using rule 73 (endFor -> .)
    DESDE           reduce using rule 73 (endFor -> .)
    RCURLY          reduce using rule 73 (endFor -> .)

    endFor                         shift and go to state 217

state 216

    (62) elsePart -> SINO elseActions bloque .

    SI              reduce using rule 62 (elsePart -> SINO elseActions bloque .)
    REGRESA         reduce using rule 62 (elsePart -> SINO elseActions bloque .)
    LEE             reduce using rule 62 (elsePart -> SINO elseActions bloque .)
    ESCRIBE         reduce using rule 62 (elsePart -> SINO elseActions bloque .)
    ID              reduce using rule 62 (elsePart -> SINO elseActions bloque .)
    MIENTRAS        reduce using rule 62 (elsePart -> SINO elseActions bloque .)
    DESDE           reduce using rule 62 (elsePart -> SINO elseActions bloque .)
    RCURLY          reduce using rule 62 (elsePart -> SINO elseActions bloque .)


state 217

    (71) nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor .

    SI              reduce using rule 71 (nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor .)
    REGRESA         reduce using rule 71 (nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor .)
    LEE             reduce using rule 71 (nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor .)
    ESCRIBE         reduce using rule 71 (nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor .)
    ID              reduce using rule 71 (nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor .)
    MIENTRAS        reduce using rule 71 (nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor .)
    DESDE           reduce using rule 71 (nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor .)
    RCURLY          reduce using rule 71 (nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI createFor HACER bloque endFor .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACKET in state 42 resolved as shift
