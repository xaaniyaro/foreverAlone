
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaleftPLUSMINUSleftTIMESDIVIDEAND CHAR COMMA CTEC CTEF CTEI CTES DESDE DIVIDE ENTONCES EQUAL EQUALS ESCRIBE FLOAT FUNCION GREATER GREATERO HACER HASTA HAZ ID INT LBRACKET LCURLY LEE LESS LESSO LPAREN MIENTRAS MINUS NOTEQUAL OR PLUS PRINCIPAL PROGRAMA RBRACKET RCURLY REGRESA RPAREN SEMICOLON SI SINO TIMES VAR VOIDempty :programa : PROGRAMA ID SEMICOLON vars createTable func_declarations main showstackscreateTable : emptyvars : VAR var2\n            | emptyvar1 : tipo lista_ids SEMICOLONvar2 : var1 var2\n            | var1 var_decl :  ID\n                |   ID LBRACKET CTEI RBRACKET\n                |   ID LBRACKET exp RBRACKETlista_ids : lista_ids COMMA var_decl\n                | var_decl tipo : INT\n            | FLOAT\n            | CHARfunc_declarations : func_decl func_declarations\n                        | emptyfunc_decl : FUNCION func2 ID LPAREN params RPAREN vars bloquefunc2 : tipo\n            | VOIDbloque : LCURLY bloque1 RCURLYbloque1 : estatuto bloque1\n                | emptyestatuto : asig\n                | cond\n                | retorno\n                | lectura\n                | escritura\n                | llamada\n                | repeticionasig : variable EQUAL exp SEMICOLONmain : PRINCIPAL LPAREN RPAREN bloqueparam_decl : tipo IDparams : params COMMA param_decl\n                | param_declretorno : REGRESA LPAREN exp RPAREN SEMICOLONllamada : ID LPAREN exp llamada2 RPAREN llamallamada2 : COMMA exp llamada2\n                | emptyllama : SEMICOLON\n            | emptylectura : LEE LPAREN variable RPAREN SEMICOLONescritura : ESCRIBE LPAREN escritura1 escritura2 RPAREN SEMICOLONescritura1 : CTES\n                | expescritura2 : COMMA escritura1 escritura2\n                | emptycond : SI LPAREN exp RPAREN ENTONCES bloque condicion1condicion1 : SINO bloque\n                | emptyrepeticion : condicional\n                | nocondicionalcondicional : MIENTRAS LPAREN exp RPAREN HAZ bloquenocondicional : DESDE ID dimension EQUAL CTEI HASTA CTEI HACER bloque\n                    | DESDE ID EQUAL CTEI HASTA CTEI HACER bloqueexp : texp exp1exp1 : OR texp exp1\n            | emptytexp : gexp texp1texp1 : AND gexp texp1\n             | emptygexp : mexp gexp1gexp1 : gexp2 mexp gexp1\n             | emptygexp2 : LESS\n            | LESSO\n            | GREATER\n            | GREATERO\n            | NOTEQUAL\n            | EQUALSmexp : termino mexp1mexp1 : mexp2 termino mexp1\n             | emptymexp2 : PLUS\n            | MINUStermino : factor termino1termino1 : TIMES factor termino1\n                | DIVIDE factor termino1\n                | emptyfactor : LPAREN exp RPAREN\n                | varcte\n                | variable\n                | llamadavariable : ID dimensiondimension : LBRACKET exp RBRACKET\n                | emptyvarcte :  CTEI\n                | CTEF\n                | CTEC showstacks : empty'
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,24,33,34,86,133,],[0,-1,-2,-91,-33,-22,]),'ID':([2,12,13,14,15,27,28,29,31,32,46,55,56,61,64,67,69,70,71,72,73,74,76,78,79,81,82,87,90,101,103,104,105,106,107,108,109,116,117,119,124,133,135,136,137,138,139,140,144,158,159,160,162,167,173,174,180,181,183,186,188,191,193,194,],[3,23,-14,-15,-16,36,-20,-21,23,38,38,38,38,38,38,38,-66,-67,-68,-69,-70,-71,38,-75,-76,38,38,115,122,115,-25,-26,-27,-28,-29,-30,-31,-52,-53,141,38,-22,38,38,38,150,38,38,-1,-38,-41,-42,-32,38,-37,-43,-1,-44,-54,-49,-51,-50,-56,-55,]),'SEMICOLON':([3,21,22,23,37,38,41,42,43,44,45,47,48,49,50,51,54,57,58,59,60,62,63,65,66,68,75,77,80,83,85,93,94,95,96,97,98,99,126,127,128,129,130,131,132,144,146,158,159,160,164,165,175,],[4,30,-13,-9,-12,-1,-1,-1,-1,-1,-1,-82,-83,-84,-89,-90,-85,-87,-10,-11,-57,-59,-60,-62,-63,-65,-72,-74,-77,-80,-88,-1,-1,-1,-1,-1,-1,-81,-86,-58,-61,-64,-73,-78,-79,159,162,-38,-41,-42,173,174,181,]),'VAR':([4,120,],[6,6,]),'FUNCION':([4,5,7,8,9,10,11,17,20,30,133,157,],[-1,-1,-5,19,-3,-4,-8,19,-7,-6,-22,-19,]),'PRINCIPAL':([4,5,7,8,9,10,11,16,17,18,20,26,30,133,157,],[-1,-1,-5,-1,-3,-4,-8,25,-1,-18,-7,-17,-6,-22,-19,]),'INT':([6,11,19,30,53,121,],[13,13,13,-6,13,13,]),'FLOAT':([6,11,19,30,53,121,],[14,14,14,-6,14,14,]),'CHAR':([6,11,19,30,53,121,],[15,15,15,-6,15,15,]),'LCURLY':([7,10,11,20,30,52,120,142,172,177,187,190,192,],[-5,-4,-8,-7,-6,87,-1,87,87,87,87,87,87,]),'VOID':([19,],[29,]),'COMMA':([21,22,23,37,38,41,42,43,44,45,47,48,49,50,51,54,57,58,59,60,62,63,65,66,68,75,77,80,83,85,88,89,91,93,94,95,96,97,98,99,122,126,127,128,129,130,131,132,143,144,145,151,152,153,158,159,160,176,],[31,-13,-9,-12,-1,-1,-1,-1,-1,-1,-82,-83,-84,-89,-90,-85,-87,-10,-11,-57,-59,-60,-62,-63,-65,-72,-74,-77,-80,-88,121,-36,124,-1,-1,-1,-1,-1,-1,-81,-34,-86,-58,-61,-64,-73,-78,-79,-35,-1,124,167,-45,-46,-38,-41,-42,167,]),'LBRACKET':([23,38,115,141,150,],[32,56,56,56,56,]),'LPAREN':([25,32,36,38,46,55,56,61,64,67,69,70,71,72,73,74,76,78,79,81,82,111,112,113,114,115,118,124,135,136,137,139,140,167,],[35,46,53,55,46,46,46,46,46,46,-66,-67,-68,-69,-70,-71,46,-75,-76,46,46,136,137,138,139,55,140,46,46,46,46,46,46,46,]),'CTEI':([32,46,55,56,61,64,67,69,70,71,72,73,74,76,78,79,81,82,124,135,136,137,139,140,156,167,170,179,184,],[39,85,85,85,85,85,85,-66,-67,-68,-69,-70,-71,85,-75,-76,85,85,85,85,85,85,85,85,171,85,178,185,189,]),'CTEF':([32,46,55,56,61,64,67,69,70,71,72,73,74,76,78,79,81,82,124,135,136,137,139,140,167,],[50,50,50,50,50,50,50,-66,-67,-68,-69,-70,-71,50,-75,-76,50,50,50,50,50,50,50,50,50,]),'CTEC':([32,46,55,56,61,64,67,69,70,71,72,73,74,76,78,79,81,82,124,135,136,137,139,140,167,],[51,51,51,51,51,51,51,-66,-67,-68,-69,-70,-71,51,-75,-76,51,51,51,51,51,51,51,51,51,]),'RPAREN':([35,38,41,42,43,44,45,47,48,49,50,51,54,57,60,62,63,65,66,68,75,77,80,83,84,85,88,89,91,93,94,95,96,97,98,99,122,123,125,126,127,128,129,130,131,132,143,144,145,147,148,149,150,151,152,153,154,158,159,160,161,166,168,176,182,],[52,-1,-1,-1,-1,-1,-1,-82,-83,-84,-89,-90,-85,-87,-57,-59,-60,-62,-63,-65,-72,-74,-77,-80,99,-88,120,-36,-1,-1,-1,-1,-1,-1,-1,-81,-34,144,-40,-86,-58,-61,-64,-73,-78,-79,-35,-1,-1,163,164,165,-1,-1,-45,-46,169,-38,-41,-42,-39,175,-48,-1,-47,]),'TIMES':([38,39,45,47,48,49,50,51,54,57,85,97,98,99,126,144,158,159,160,],[-1,-88,81,-82,-83,-84,-89,-90,-85,-87,-88,81,81,-81,-86,-1,-38,-41,-42,]),'DIVIDE':([38,39,45,47,48,49,50,51,54,57,85,97,98,99,126,144,158,159,160,],[-1,-88,82,-82,-83,-84,-89,-90,-85,-87,-88,82,82,-81,-86,-1,-38,-41,-42,]),'PLUS':([38,39,44,45,47,48,49,50,51,54,57,80,83,85,96,97,98,99,126,131,132,144,158,159,160,],[-1,-88,78,-1,-82,-83,-84,-89,-90,-85,-87,-77,-80,-88,78,-1,-1,-81,-86,-78,-79,-1,-38,-41,-42,]),'MINUS':([38,39,44,45,47,48,49,50,51,54,57,80,83,85,96,97,98,99,126,131,132,144,158,159,160,],[-1,-88,79,-1,-82,-83,-84,-89,-90,-85,-87,-77,-80,-88,79,-1,-1,-81,-86,-78,-79,-1,-38,-41,-42,]),'LESS':([38,39,43,44,45,47,48,49,50,51,54,57,75,77,80,83,85,95,96,97,98,99,126,130,131,132,144,158,159,160,],[-1,-88,69,-1,-1,-82,-83,-84,-89,-90,-85,-87,-72,-74,-77,-80,-88,69,-1,-1,-1,-81,-86,-73,-78,-79,-1,-38,-41,-42,]),'LESSO':([38,39,43,44,45,47,48,49,50,51,54,57,75,77,80,83,85,95,96,97,98,99,126,130,131,132,144,158,159,160,],[-1,-88,70,-1,-1,-82,-83,-84,-89,-90,-85,-87,-72,-74,-77,-80,-88,70,-1,-1,-1,-81,-86,-73,-78,-79,-1,-38,-41,-42,]),'GREATER':([38,39,43,44,45,47,48,49,50,51,54,57,75,77,80,83,85,95,96,97,98,99,126,130,131,132,144,158,159,160,],[-1,-88,71,-1,-1,-82,-83,-84,-89,-90,-85,-87,-72,-74,-77,-80,-88,71,-1,-1,-1,-81,-86,-73,-78,-79,-1,-38,-41,-42,]),'GREATERO':([38,39,43,44,45,47,48,49,50,51,54,57,75,77,80,83,85,95,96,97,98,99,126,130,131,132,144,158,159,160,],[-1,-88,72,-1,-1,-82,-83,-84,-89,-90,-85,-87,-72,-74,-77,-80,-88,72,-1,-1,-1,-81,-86,-73,-78,-79,-1,-38,-41,-42,]),'NOTEQUAL':([38,39,43,44,45,47,48,49,50,51,54,57,75,77,80,83,85,95,96,97,98,99,126,130,131,132,144,158,159,160,],[-1,-88,73,-1,-1,-82,-83,-84,-89,-90,-85,-87,-72,-74,-77,-80,-88,73,-1,-1,-1,-81,-86,-73,-78,-79,-1,-38,-41,-42,]),'EQUALS':([38,39,43,44,45,47,48,49,50,51,54,57,75,77,80,83,85,95,96,97,98,99,126,130,131,132,144,158,159,160,],[-1,-88,74,-1,-1,-82,-83,-84,-89,-90,-85,-87,-72,-74,-77,-80,-88,74,-1,-1,-1,-81,-86,-73,-78,-79,-1,-38,-41,-42,]),'AND':([38,39,42,43,44,45,47,48,49,50,51,54,57,66,68,75,77,80,83,85,94,95,96,97,98,99,126,129,130,131,132,144,158,159,160,],[-1,-88,64,-1,-1,-1,-82,-83,-84,-89,-90,-85,-87,-63,-65,-72,-74,-77,-80,-88,64,-1,-1,-1,-1,-81,-86,-64,-73,-78,-79,-1,-38,-41,-42,]),'OR':([38,39,41,42,43,44,45,47,48,49,50,51,54,57,63,65,66,68,75,77,80,83,85,93,94,95,96,97,98,99,126,128,129,130,131,132,144,158,159,160,],[-1,-88,61,-1,-1,-1,-1,-82,-83,-84,-89,-90,-85,-87,-60,-62,-63,-65,-72,-74,-77,-80,-88,61,-1,-1,-1,-1,-1,-81,-86,-61,-64,-73,-78,-79,-1,-38,-41,-42,]),'RBRACKET':([38,39,40,41,42,43,44,45,47,48,49,50,51,54,57,60,62,63,65,66,68,75,77,80,83,85,92,93,94,95,96,97,98,99,126,127,128,129,130,131,132,144,158,159,160,],[-1,58,59,-1,-1,-1,-1,-1,-82,-83,-84,-89,-90,-85,-87,-57,-59,-60,-62,-63,-65,-72,-74,-77,-80,-88,126,-1,-1,-1,-1,-1,-1,-81,-86,-58,-61,-64,-73,-78,-79,-1,-38,-41,-42,]),'EQUAL':([54,57,110,115,126,141,155,],[-85,-87,135,-1,-86,156,170,]),'RCURLY':([87,100,101,102,103,104,105,106,107,108,109,116,117,133,134,144,158,159,160,162,173,174,180,181,183,186,188,191,193,194,],[-1,133,-1,-24,-25,-26,-27,-28,-29,-30,-31,-52,-53,-22,-23,-1,-38,-41,-42,-32,-37,-43,-1,-44,-54,-49,-51,-50,-56,-55,]),'SI':([87,101,103,104,105,106,107,108,109,116,117,133,144,158,159,160,162,173,174,180,181,183,186,188,191,193,194,],[111,111,-25,-26,-27,-28,-29,-30,-31,-52,-53,-22,-1,-38,-41,-42,-32,-37,-43,-1,-44,-54,-49,-51,-50,-56,-55,]),'REGRESA':([87,101,103,104,105,106,107,108,109,116,117,133,144,158,159,160,162,173,174,180,181,183,186,188,191,193,194,],[112,112,-25,-26,-27,-28,-29,-30,-31,-52,-53,-22,-1,-38,-41,-42,-32,-37,-43,-1,-44,-54,-49,-51,-50,-56,-55,]),'LEE':([87,101,103,104,105,106,107,108,109,116,117,133,144,158,159,160,162,173,174,180,181,183,186,188,191,193,194,],[113,113,-25,-26,-27,-28,-29,-30,-31,-52,-53,-22,-1,-38,-41,-42,-32,-37,-43,-1,-44,-54,-49,-51,-50,-56,-55,]),'ESCRIBE':([87,101,103,104,105,106,107,108,109,116,117,133,144,158,159,160,162,173,174,180,181,183,186,188,191,193,194,],[114,114,-25,-26,-27,-28,-29,-30,-31,-52,-53,-22,-1,-38,-41,-42,-32,-37,-43,-1,-44,-54,-49,-51,-50,-56,-55,]),'MIENTRAS':([87,101,103,104,105,106,107,108,109,116,117,133,144,158,159,160,162,173,174,180,181,183,186,188,191,193,194,],[118,118,-25,-26,-27,-28,-29,-30,-31,-52,-53,-22,-1,-38,-41,-42,-32,-37,-43,-1,-44,-54,-49,-51,-50,-56,-55,]),'DESDE':([87,101,103,104,105,106,107,108,109,116,117,133,144,158,159,160,162,173,174,180,181,183,186,188,191,193,194,],[119,119,-25,-26,-27,-28,-29,-30,-31,-52,-53,-22,-1,-38,-41,-42,-32,-37,-43,-1,-44,-54,-49,-51,-50,-56,-55,]),'SINO':([133,180,],[-22,187,]),'CTES':([139,167,],[152,152,]),'ENTONCES':([163,],[172,]),'HAZ':([169,],[177,]),'HASTA':([171,178,],[179,184,]),'HACER':([185,189,],[190,192,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'vars':([4,120,],[5,142,]),'empty':([4,5,8,17,24,38,41,42,43,44,45,87,91,93,94,95,96,97,98,101,115,120,141,144,145,150,151,176,180,],[7,9,18,18,34,57,62,65,68,77,83,102,125,62,65,68,77,83,83,102,57,7,57,160,125,57,168,168,188,]),'createTable':([5,],[8,]),'var2':([6,11,],[10,20,]),'var1':([6,11,],[11,11,]),'tipo':([6,11,19,53,121,],[12,12,28,90,90,]),'func_declarations':([8,17,],[16,26,]),'func_decl':([8,17,],[17,17,]),'lista_ids':([12,],[21,]),'var_decl':([12,31,],[22,37,]),'main':([16,],[24,]),'func2':([19,],[27,]),'showstacks':([24,],[33,]),'exp':([32,46,55,56,124,135,136,137,139,140,167,],[40,84,91,92,145,146,147,148,153,154,153,]),'texp':([32,46,55,56,61,124,135,136,137,139,140,167,],[41,41,41,41,93,41,41,41,41,41,41,41,]),'gexp':([32,46,55,56,61,64,124,135,136,137,139,140,167,],[42,42,42,42,42,94,42,42,42,42,42,42,42,]),'mexp':([32,46,55,56,61,64,67,124,135,136,137,139,140,167,],[43,43,43,43,43,43,95,43,43,43,43,43,43,43,]),'termino':([32,46,55,56,61,64,67,76,124,135,136,137,139,140,167,],[44,44,44,44,44,44,44,96,44,44,44,44,44,44,44,]),'factor':([32,46,55,56,61,64,67,76,81,82,124,135,136,137,139,140,167,],[45,45,45,45,45,45,45,45,97,98,45,45,45,45,45,45,45,]),'varcte':([32,46,55,56,61,64,67,76,81,82,124,135,136,137,139,140,167,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'variable':([32,46,55,56,61,64,67,76,81,82,87,101,124,135,136,137,138,139,140,167,],[48,48,48,48,48,48,48,48,48,48,110,110,48,48,48,48,149,48,48,48,]),'llamada':([32,46,55,56,61,64,67,76,81,82,87,101,124,135,136,137,139,140,167,],[49,49,49,49,49,49,49,49,49,49,108,108,49,49,49,49,49,49,49,]),'dimension':([38,115,141,150,],[54,54,155,54,]),'exp1':([41,93,],[60,127,]),'texp1':([42,94,],[63,128,]),'gexp1':([43,95,],[66,129,]),'gexp2':([43,95,],[67,67,]),'mexp1':([44,96,],[75,130,]),'mexp2':([44,96,],[76,76,]),'termino1':([45,97,98,],[80,131,132,]),'bloque':([52,142,172,177,187,190,192,],[86,157,180,183,191,193,194,]),'params':([53,],[88,]),'param_decl':([53,121,],[89,143,]),'bloque1':([87,101,],[100,134,]),'estatuto':([87,101,],[101,101,]),'asig':([87,101,],[103,103,]),'cond':([87,101,],[104,104,]),'retorno':([87,101,],[105,105,]),'lectura':([87,101,],[106,106,]),'escritura':([87,101,],[107,107,]),'repeticion':([87,101,],[109,109,]),'condicional':([87,101,],[116,116,]),'nocondicional':([87,101,],[117,117,]),'llamada2':([91,145,],[123,161,]),'escritura1':([139,167,],[151,176,]),'llama':([144,],[158,]),'escritura2':([151,176,],[166,182,]),'condicion1':([180,],[186,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',97),
  ('programa -> PROGRAMA ID SEMICOLON vars createTable func_declarations main showstacks','programa',8,'p_programa','parser.py',107),
  ('createTable -> empty','createTable',1,'p_createTable','parser.py',111),
  ('vars -> VAR var2','vars',2,'p_vars','parser.py',122),
  ('vars -> empty','vars',1,'p_vars','parser.py',123),
  ('var1 -> tipo lista_ids SEMICOLON','var1',3,'p_var1','parser.py',131),
  ('var2 -> var1 var2','var2',2,'p_var2','parser.py',135),
  ('var2 -> var1','var2',1,'p_var2','parser.py',136),
  ('var_decl -> ID','var_decl',1,'p_var_decl','parser.py',146),
  ('var_decl -> ID LBRACKET CTEI RBRACKET','var_decl',4,'p_var_decl','parser.py',147),
  ('var_decl -> ID LBRACKET exp RBRACKET','var_decl',4,'p_var_decl','parser.py',148),
  ('lista_ids -> lista_ids COMMA var_decl','lista_ids',3,'p_lista_ids','parser.py',155),
  ('lista_ids -> var_decl','lista_ids',1,'p_lista_ids','parser.py',156),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',170),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',171),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',172),
  ('func_declarations -> func_decl func_declarations','func_declarations',2,'p_func_declarations','parser.py',178),
  ('func_declarations -> empty','func_declarations',1,'p_func_declarations','parser.py',179),
  ('func_decl -> FUNCION func2 ID LPAREN params RPAREN vars bloque','func_decl',8,'p_func_decl','parser.py',189),
  ('func2 -> tipo','func2',1,'p_func2','parser.py',197),
  ('func2 -> VOID','func2',1,'p_func2','parser.py',198),
  ('bloque -> LCURLY bloque1 RCURLY','bloque',3,'p_bloque','parser.py',204),
  ('bloque1 -> estatuto bloque1','bloque1',2,'p_bloque1','parser.py',207),
  ('bloque1 -> empty','bloque1',1,'p_bloque1','parser.py',208),
  ('estatuto -> asig','estatuto',1,'p_estatuto','parser.py',213),
  ('estatuto -> cond','estatuto',1,'p_estatuto','parser.py',214),
  ('estatuto -> retorno','estatuto',1,'p_estatuto','parser.py',215),
  ('estatuto -> lectura','estatuto',1,'p_estatuto','parser.py',216),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','parser.py',217),
  ('estatuto -> llamada','estatuto',1,'p_estatuto','parser.py',218),
  ('estatuto -> repeticion','estatuto',1,'p_estatuto','parser.py',219),
  ('asig -> variable EQUAL exp SEMICOLON','asig',4,'p_asig','parser.py',224),
  ('main -> PRINCIPAL LPAREN RPAREN bloque','main',4,'p_main','parser.py',229),
  ('param_decl -> tipo ID','param_decl',2,'p_param_decl','parser.py',235),
  ('params -> params COMMA param_decl','params',3,'p_params','parser.py',239),
  ('params -> param_decl','params',1,'p_params','parser.py',240),
  ('retorno -> REGRESA LPAREN exp RPAREN SEMICOLON','retorno',5,'p_retorno','parser.py',252),
  ('llamada -> ID LPAREN exp llamada2 RPAREN llama','llamada',6,'p_llamada','parser.py',257),
  ('llamada2 -> COMMA exp llamada2','llamada2',3,'p_llamada2','parser.py',260),
  ('llamada2 -> empty','llamada2',1,'p_llamada2','parser.py',261),
  ('llama -> SEMICOLON','llama',1,'p_llama','parser.py',264),
  ('llama -> empty','llama',1,'p_llama','parser.py',265),
  ('lectura -> LEE LPAREN variable RPAREN SEMICOLON','lectura',5,'p_lectura','parser.py',270),
  ('escritura -> ESCRIBE LPAREN escritura1 escritura2 RPAREN SEMICOLON','escritura',6,'p_escritura','parser.py',275),
  ('escritura1 -> CTES','escritura1',1,'p_escritura1','parser.py',278),
  ('escritura1 -> exp','escritura1',1,'p_escritura1','parser.py',279),
  ('escritura2 -> COMMA escritura1 escritura2','escritura2',3,'p_escritura2_a','parser.py',282),
  ('escritura2 -> empty','escritura2',1,'p_escritura2_a','parser.py',283),
  ('cond -> SI LPAREN exp RPAREN ENTONCES bloque condicion1','cond',7,'p_cond','parser.py',289),
  ('condicion1 -> SINO bloque','condicion1',2,'p_condicion1','parser.py',292),
  ('condicion1 -> empty','condicion1',1,'p_condicion1','parser.py',293),
  ('repeticion -> condicional','repeticion',1,'p_repeticion','parser.py',298),
  ('repeticion -> nocondicional','repeticion',1,'p_repeticion','parser.py',299),
  ('condicional -> MIENTRAS LPAREN exp RPAREN HAZ bloque','condicional',6,'p_condicional','parser.py',304),
  ('nocondicional -> DESDE ID dimension EQUAL CTEI HASTA CTEI HACER bloque','nocondicional',9,'p_nocondicional','parser.py',309),
  ('nocondicional -> DESDE ID EQUAL CTEI HASTA CTEI HACER bloque','nocondicional',8,'p_nocondicional','parser.py',310),
  ('exp -> texp exp1','exp',2,'p_exp','parser.py',315),
  ('exp1 -> OR texp exp1','exp1',3,'p_exp1','parser.py',318),
  ('exp1 -> empty','exp1',1,'p_exp1','parser.py',319),
  ('texp -> gexp texp1','texp',2,'p_texp','parser.py',327),
  ('texp1 -> AND gexp texp1','texp1',3,'p_texp1','parser.py',330),
  ('texp1 -> empty','texp1',1,'p_texp1','parser.py',331),
  ('gexp -> mexp gexp1','gexp',2,'p_gexp','parser.py',339),
  ('gexp1 -> gexp2 mexp gexp1','gexp1',3,'p_gexp1','parser.py',342),
  ('gexp1 -> empty','gexp1',1,'p_gexp1','parser.py',343),
  ('gexp2 -> LESS','gexp2',1,'p_exp2','parser.py',349),
  ('gexp2 -> LESSO','gexp2',1,'p_exp2','parser.py',350),
  ('gexp2 -> GREATER','gexp2',1,'p_exp2','parser.py',351),
  ('gexp2 -> GREATERO','gexp2',1,'p_exp2','parser.py',352),
  ('gexp2 -> NOTEQUAL','gexp2',1,'p_exp2','parser.py',353),
  ('gexp2 -> EQUALS','gexp2',1,'p_exp2','parser.py',354),
  ('mexp -> termino mexp1','mexp',2,'p_mexp','parser.py',360),
  ('mexp1 -> mexp2 termino mexp1','mexp1',3,'p_mexp1','parser.py',383),
  ('mexp1 -> empty','mexp1',1,'p_mexp1','parser.py',384),
  ('mexp2 -> PLUS','mexp2',1,'p_mexp2','parser.py',390),
  ('mexp2 -> MINUS','mexp2',1,'p_mexp2','parser.py',391),
  ('termino -> factor termino1','termino',2,'p_termino','parser.py',397),
  ('termino1 -> TIMES factor termino1','termino1',3,'p_termino1','parser.py',419),
  ('termino1 -> DIVIDE factor termino1','termino1',3,'p_termino1','parser.py',420),
  ('termino1 -> empty','termino1',1,'p_termino1','parser.py',421),
  ('factor -> LPAREN exp RPAREN','factor',3,'p_factor','parser.py',429),
  ('factor -> varcte','factor',1,'p_factor','parser.py',430),
  ('factor -> variable','factor',1,'p_factor','parser.py',431),
  ('factor -> llamada','factor',1,'p_factor','parser.py',432),
  ('variable -> ID dimension','variable',2,'p_variable','parser.py',454),
  ('dimension -> LBRACKET exp RBRACKET','dimension',3,'p_dimension','parser.py',460),
  ('dimension -> empty','dimension',1,'p_dimension','parser.py',461),
  ('varcte -> CTEI','varcte',1,'p_varcte','parser.py',466),
  ('varcte -> CTEF','varcte',1,'p_varcte','parser.py',467),
  ('varcte -> CTEC','varcte',1,'p_varcte','parser.py',468),
  ('showstacks -> empty','showstacks',1,'p_showstacks','parser.py',472),
]
